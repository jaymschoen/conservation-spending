[
["index.html", "Conservation funding does not track drivers of biodiversity loss Section 1 Introduction 1.1 Attribution 1.2 Data access 1.3 Data processing 1.4 Affiliations", " Conservation funding does not track drivers of biodiversity loss Vijay Ramesh1*, Jay Schoen1, Michael Levin1, Pratik Dubal2, Sebastian Heilpern1, Pooja Choksi1, Jared Meek1, Rochelle Thomas1, Don J Melnick1, Sara Kross1\" 2020-09-24 Section 1 Introduction This is the bookdown version of a repository that contains code and analyses associated with Ramesh et. al. (in review). 1.1 Attribution Please contact the following in case of interest in the project. Vijay Ramesh (lead author) PhD Candidate, Department of Ecology, Evolution and Environmental Biology, Columbia University 1.2 Data access The following files are required to reproduce our analysis. all-grants.csv: A sheet containing all grant data (Please write to the author for access to this dataset which is currently being housed at Candid list-of-preprocessing-phrases.csv: A sheet containing phrases which need to removed before classification. list-of-keywords.csv: A sheet containing keywords which will be used to perform the rule-based classification. list-of-stopwords.csv: A sheet containing stopwords, which need to be used to post-process and filter the classification results. All supplementary data from Maxwell et al. 2016 1.3 Data processing The data processing for this project is described in the following sections. Navigate through them using the links in the sidebar. 1.4 Affiliations 1Department of Ecology, Evolution and Environmental Biology, Columbia University, 1200 Amsterdam Avenue, New York, NY 10027. 2Department of Computer Science, Columbia University, New York, NY 10027. *Corresponding author. Email: vr2352@columbia.edu "],
["pre-processing-and-filtering-of-grants.html", "Section 2 Pre-processing and filtering of grants", " Section 2 Pre-processing and filtering of grants Loading required python libraries for analysis import re import csv import tqdm import numpy as np import pandas as pd def string_found(string1, string2): if re.search(r&quot;\\b&quot; + re.escape(string1) + r&quot;\\b&quot;, string2): return True return False First, we will filter our list of grants using the pre-processing phrases to remove grants which have no descriptions (empty lines) and those that mention words such as operating support etc. Next, we will use our list of keywords to carry out a rule-based classification of all grants data = pd.read_csv(&#39;data\\\\data-all-grants.csv&#39;) preproc_ph = pd.read_csv(&#39;data\\\\list-of-preprocessing-phrases.csv&#39;) preproc_phrases = list(preproc_ph.Phrases) data = data.drop([ele for ele in data.columns.to_list() if ele not in [&#39;Description&#39;]], axis=1) data = data.dropna().reset_index(drop=True) for phrase in preproc_phrases[:6]: data = data[~data.Description.str.contains(phrase)] for phrase in preproc_phrases[6:]: data = data[data.Description.str.lower() != phrase] data_sentences = data.Description.values.tolist() data_sentences = [x.lower() for x in data_sentences] # Bigrams/Keywords to be searched as substrings in description keywords_df = pd.read_csv(&#39;data\\\\list-of-keywords.csv&#39;) category_names = [x.strip() for x in list(keywords_df)] keywords = [] for idx in range(len(category_names)): keywords.append(list(set(keywords_df[category_names[idx]].dropna()))) grant_categories = [] grant_keywords = [] pbar = tqdm.tqdm(total=len(data_sentences)) for grant in data_sentences: curr_cat = [] curr_key = [] for idx in range(len(category_names)): for keyword in keywords[idx]: if string_found(keyword, grant): curr_key.append(keyword.replace(&#39; &#39;, &#39;_&#39;)) curr_cat.append(category_names[idx]) grant_categories.append(curr_cat) grant_keywords.append(curr_key) pbar.update(1) pbar.close() # Store description, keywords and categories as csv output_grants = [] pbar = tqdm.tqdm(total=len(data_sentences)) for idx in range(len(data_sentences)): temp = [] temp.append(data_sentences[idx]) temp.append(&quot;|&quot;.join(grant_keywords[idx])) temp.append(&quot;|&quot;.join(grant_categories[idx])) output_grants.append(temp) pbar.update(1) pbar.close() with open(&quot;data\\\\output-grants.csv&quot;, &quot;w&quot;, newline=&quot;&quot;) as f: writer = csv.writer(f) writer.writerow([&#39;Description&#39;, &#39;Keywords&#39;, &#39;Categories&#39;]) writer.writerows(output_grants) "],
["filtering-of-grants-using-stopwords.html", "Section 3 Filtering of grants using stopwords", " Section 3 Filtering of grants using stopwords Here, we will use a list of stopwords to further refine our output from the rule-based classification import re import csv import tqdm import numpy as np import pandas as pd def string_found(string1, string2): if re.search(r&quot;\\b&quot; + re.escape(string1) + r&quot;\\b&quot;, string2): return True return False output_grants = &#39;data\\\\output-grants.csv&#39; stopwords_csv = &#39;data\\\\list-of-stopwords.csv&#39; output_filtered = &#39;data\\\\output-grants-filtered.csv&#39; output_data = pd.read_csv(output_grants) output_data[&#39;Stopwords&#39;] = &quot;-&quot; output_data[&#39;Filtered_Categories&#39;] = &quot;-&quot; stopwords_df = pd.read_csv(stopwords_csv) stopwords_dict = dict() for cat in [x.strip() for x in list(stopwords_df)]: temp = list(set(stopwords_df[cat].dropna())) temp = [x.lower() for x in temp] stopwords_dict[cat] = temp pbar = tqdm.tqdm(total=len(output_data)) for idx in range(len(output_data)): class_cats = list(output_data.iloc[idx][&#39;Categories&#39;].split(&#39;|&#39;)) stop_added = [] flag = False for stop_cat in stopwords_dict.keys(): if stop_cat in class_cats: for stopword in stopwords_dict[stop_cat]: if string_found(stopword, output_data.iloc[idx][&#39;Description&#39;].lower()): class_cats.remove(stop_cat) stop_added.append(stopword) break output_data.loc[idx,&#39;Filtered_Categories&#39;] = &#39;|&#39;.join(list(set(class_cats))) if len(stop_added) &gt; 0: output_data.loc[idx, &#39;Stopwords&#39;] = &#39;|&#39;.join(list(set(stop_added))) pbar.update(1) pbar.close() output_data[output_data.Stopwords != &#39;-&#39;] output_data.to_csv(output_filtered, index=False) Following stopword filtering, we prepare a dataframe of classified grants for Exploratory Data Analysis import pandas as pd import numpy as np import math import tqdm from sklearn.preprocessing import MultiLabelBinarizer mlb = MultiLabelBinarizer() data = pd.read_csv(&#39;data\\\\all-grants.csv&#39;) preproc_ph = pd.read_csv(&#39;data\\\\list-of-preprocessing-phrases.csv&#39;) preproc_phrases = list(preproc_ph.Phrases) data = data.drop([ele for ele in data.columns.to_list() if ele in [&#39;X&#39;, &#39;Random Sort&#39;, &#39;Unnamed: 0&#39;]], axis=1) data = data.dropna(subset=[&#39;Description&#39;]) for phrase in preproc_phrases[:6]: data = data[~data.Description.str.contains(phrase)] for phrase in preproc_phrases[6:]: data = data[data.Description.str.lower() != phrase] data = data.reset_index(drop=True) data_class = pd.read_csv(&#39;data\\\\output-grants-filtered.csv&#39;) data_class = data_class.fillna(&#39;-&#39;) pbar = tqdm.tqdm(total=len(data)) for idx in range(len(data)): for col in data_class.columns[1:]: if type(data_class[col][idx]) == str: data_class[col][idx] = list(set(data_class[col][idx].split(&#39;|&#39;))) pbar.update(1) pbar.close() df_final = pd.concat([data, data_class[[&#39;Keywords&#39;, &#39;Filtered_Categories&#39;, &#39;Bio_keywords&#39;]]], axis=1) df_final = df_final.join(pd.DataFrame(mlb.fit_transform(df_final.pop(&#39;Filtered_Categories&#39;)),columns=[&#39;cat_&#39; + x for x in mlb.classes_],index=df_final.index)) df_final = df_final.join(pd.DataFrame(mlb.fit_transform(df_final.pop(&#39;Bio_keywords&#39;)),columns=[&#39;bio_key_&#39; + x for x in mlb.classes_],index=df_final.index)) df_final = df_final.drop([&#39;cat_-&#39;, &#39;bio_key_-&#39;], axis=1) df_final.to_csv(&#39;data\\\\classified-grants-for-analysis.csv&#39;, index=False) "],
["exploratory-data-analysis.html", "Section 4 Exploratory data analysis", " Section 4 Exploratory data analysis Here, we will carry out exploratory data analysis of grants to obtain a sense of how money has been allocated across threats and taxonomic groups Read in excel sheets for grants awarded by the top 1000 foundations and the list of classified grants for exploratory data analysis funders_top500 &lt;- read_csv(&quot;data/data-list-of-top500-donors-by-money.csv&quot;) data &lt;- read_csv(&quot;data/classified-grants-for-analysis.csv&quot;) Below we visualize overall funding provided by the top 1000 grantmakers (Supplementary Fig S1 - Accumulation of Funding Across Top Grantmakers) money_accum &lt;- function(x) { funders_top500 %&gt;% group_by(`Grantmaker Name`) %&gt;% summarise(total = sum(`Amount Funded`)) %&gt;% arrange(desc(total)) %&gt;% slice(1:x) %&gt;% dplyr::select(total) %&gt;% sum(na.rm = TRUE) } rank &lt;- c(0,50,seq(100,500,100)) money &lt;- sapply(rank, money_accum) top_funders &lt;- data.frame(n_funders = rank, tot_money_mil = money/1e6) fig_top_funders &lt;- ggplot(top_funders, aes(x = n_funders, y = tot_money_mil, group = 1)) + geom_line() + geom_point() + geom_area(aes(y=ifelse(tot_money_mil&lt; top_funders[6,2], tot_money_mil, top_funders[6,2])), fill=&quot;#696969&quot;, alpha = .4) + theme_minimal() + xlab(&quot;Number of foundations&quot;) + ylab(&quot;Cumulative total in millions of USD&quot;) + scale_x_discrete(limits = rank[-2]) fig_top_funders # % Money captured by top 400 funders = 98% top400 &lt;- money[6]/money[7] top400 ggsave(fig_top_funders, filename = &quot;figs\\\\fig_topGrantmakers_funding.png&quot;, height = 8, width = 11, device = png(), units=&quot;in&quot;, dpi = 300) # show exported image knitr::include_graphics(&quot;figs/fig_topGrantmakers_funding.png&quot;) Figure 4.1: Accumulation curve of the funding in our dataset across the top 1000 grantmakers. The shaded region encompasses the amount of funding captured by the top 400 grantmakers, which represents more than 98% of the total amount of funding. Now, let’s look at how many grants were classified across multiple threat categories and what proportion of money they retained threat &lt;- data[,c(1:10, 37:42)] %&gt;% mutate(sumAcross = cat_threat_climate + cat_threat_energytransport + cat_threat_habitat + cat_threat_inv_spec + cat_threat_overexp + cat_threat_pollution) %&gt;% filter(sumAcross &gt; 0) # Checking number of grants/money for multiple threat category grants tot_threat &lt;- sum(threat$Grant.Amount, na.rm = T) # Four or more threats retained 99.99% of money threat4 &lt;- threat %&gt;% filter(sumAcross &lt;= 4) nrow(threat4)/nrow(threat) sum(threat4$Grant.Amount,na.rm = T)/tot_threat # Three threats retains 99.3% of the money threat3 &lt;- threat %&gt;% filter(sumAcross &lt;= 3) nrow(threat3)/nrow(threat) sum(threat3$Grant.Amount,na.rm = T)/tot_threat # Two threats retained 96% of the money threat2 &lt;- threat %&gt;% filter(sumAcross &lt;= 2) nrow(threat2)/nrow(threat) sum(threat2$Grant.Amount, na.rm = T)/tot_threat # Unique threat categories retained 80.3% of the money threat1 &lt;- threat %&gt;% filter(sumAcross &lt;= 1) nrow(threat1)/nrow(threat) sum(threat1$Grant.Amount,na.rm = T)/tot_threat Plot multiple threat categories and grants n_threats &lt;- 1:4 n_threat_grants &lt;- c(nrow(threat1), nrow(threat2) - nrow(threat1), nrow(threat3) - nrow(threat2), nrow(threat4) - nrow(threat3)) threats &lt;- data.frame(n_threats, n_threat_grants) fig_threats_grants &lt;- ggplot(threats, aes(x = n_threats, y = n_threat_grants)) + geom_line() + theme_bw() + labs(title = &quot;Number of grants across multiple Threat Categories&quot;, x=&quot;Number of threat categories&quot;, y=&quot;Number of grants&quot;) plot(fig_threats_grants) # save as png ggsave(fig_threats_grants, filename = &quot;figs/fig_threats_grants.png&quot;, height = 7, width = 12, device = png(), dpi = 300); dev.off() # show exported image knitr::include_graphics(&quot;figs/fig_threats_grants.png&quot;) (#fig:export_fig_threats_grants)Number of grants that were classified into one or more categories of threat Following the above analysis, we decided to retain grants classified across multiple threat categories for the network analysis alone. "],
["post-processing-of-grants.html", "Section 5 Post-processing of grants", " Section 5 Post-processing of grants Here we remove and filter those grants that may have been erroneously classified, following the process of validation and any initial exploratory data analysis Those grants with no funding amount recorded or no keywords from our list contributed nothing to this analysis, and were removed. data &lt;- data %&gt;% filter(Keywords != &quot;[&#39;-&#39;]&quot;) %&gt;% drop_na(Grant.Amount) %&gt;% dplyr::select(1:42) names(data) Here we hard-coded several specific fixes to the classification that repeatedly cropped up during our validation process. All have been checked to have 0 mis-classifications. # Removing grants containing &quot;dinner&quot; data &lt;- data %&gt;% filter(str_detect(Description, &quot;dinner&quot;) == FALSE) # Classifying &quot;dissemination&quot; as act_edu for(i in 1:nrow(data)) { if(str_detect(data$Description[i], &quot;dissemination&quot;) == TRUE) { data$cat_act_edu[i] = 1 } } # Removing threat_energytransport classification for &quot;palm oil&quot; for(i in 1:nrow(data)) { if(str_detect(data$Description[i], &quot;palm oil|oil-palm|oil palm&quot;) == TRUE) { data$cat_threat_energytransport[i] = 0 } } # Removing hab_other classification for &quot;aquatic&quot; (will be freshwater/marine) for(i in 1:nrow(data)) { if(str_detect(data$Description[i], &quot;aquatic&quot;) == TRUE) { data$cat_habitat_other[i] = 0 } } Based on advice from the data provider, we only included grants between 2003-2016 data &lt;- data %&gt;% filter(Year.Authorized &gt;= 2003 &amp; Year.Authorized &lt;= 2016) We ensured that our study focused on in situ conservation grants by eliminating classifications from grants that may be directed toward captive management (aquarium/zoo category). for(i in 1:nrow(data)){ if(data$cat_aquarium_zoo[i]==1){ data[i,c(11:17, 19:28, 30:42)]=0 } } Here, we built dummy variables that take the sum of our binary classification data across the columns of each broader category. data &lt;- data %&gt;% mutate(Num.Class = rowSums(.[,11:length(.)])) %&gt;% mutate(Num.Thr = rowSums(.[37:42])) %&gt;% mutate(Num.Act = rowSums(.[11:17])) %&gt;% mutate(Num.Hab = rowSums(.[c(25,26,28)])) %&gt;% mutate(Num.Tax = rowSums(.[30:36])) %&gt;% mutate(Num.Bio = rowSums(.[19:20])) We sought to only consider grants that were focused on biodiversity conservation. Upon exploring the data, we found that many grants classified into threat_climate and threat_energytransportation were often not addressing biodiversity. Accordingly, we only included grants classified into these two sub-categories if the descriptions mentioned a biodiversity-related keyword (a habitat, taxa, or general word such as “conservation”). Removing climate/energy grants that do not contain biodiversity conservation keywords: ## Category Lists clim.energy_cat &lt;- names(data)[c(37,38)] # threat_climate and threat_energytransport bio.filter_cat &lt;- names(data)[c(19:28, 30:36)] # Grants that were classified into a single category only data_bio.1 &lt;- data %&gt;% filter_at(vars(bio.filter_cat), any_vars(.&gt; 0)) data_non.bio.1 &lt;- data %&gt;% filter_at(vars(bio.filter_cat), all_vars(. == 0)) data_bio.2 &lt;- data_non.bio.1 %&gt;% filter_at(vars(clim.energy_cat), all_vars(.==0)) data_non.bio.2 &lt;- data_non.bio.1 %&gt;% filter_at(vars(clim.energy_cat), any_vars(.&gt;0)) data_bio &lt;- bind_rows(data_bio.1, data_bio.2) data_non.bio &lt;- data_non.bio.2 At this point, this is our final dataset of classified grants to analyze. This is our “data_multi” dataset, as grants are classified into all categories/sub-categories that the algorithm classified them into; multiple sub-category classifications are included in this dataframe. “Non-bio” grants are exported as well for supplementary analysis. data.multi &lt;- data_bio write_csv(data.multi,&quot;data\\\\post-processed-grants-for-analysis-multi.csv&quot;) write_csv(data_non.bio,&quot;data\\\\post-processed-grants-for-analysis-nonbio.csv&quot;) In the “data_multi” dataset, grants classified into multiple sub-categories (e.g. threat_climate + threat_habitat) would be over-represented in our analysis of funding. We sought to only count the amount of funding for a grant once within each category. Otherwise, To accomplish this, we modified the dataset in several ways: 1. Grants classified into two sub-categories were classified into a new column combining the two (e.g. threat_climate_habitat) 2. Grants classified into three or more sub-categories were classified into new “other” column (e.g. threat_other) 3. The habitat category had joint sub-categories in the initial list of categories (e.g. hab_marine_terrestrial). Any grants classified into both a single (e.g. hab_marine) and an overlapping joint sub-category (e.g. hab_marine_terrestrial) were classified as only the joint (e.g. hab_marine_terrestrial) Full code exists in supplementary code folder. Subsequently, “unique” data file was written and used for further analysis source(&quot;code//code_01_unique-grant-classification.R&quot;) write_csv(data.unique, &quot;data\\\\post-processed-grants-for-analysis-unique.csv&quot;) "],
["mismatch-between-conservation-funding-and-drivers-of-biodiversity-loss.html", "Section 6 Mismatch between conservation funding and drivers of biodiversity loss", " Section 6 Mismatch between conservation funding and drivers of biodiversity loss We estimate if the amount of funding to drivers of biodiversity loss tracks the number of species threatened by each of these drivers # Load libraries library(tidyverse) library(scales) library(ggsci) Importing data # Read in data of post-processed grants data &lt;- read_csv(&quot;data\\\\post-processed-grants-for-analysis-unique.csv&quot;) %&gt;% as.data.frame() %&gt;% dplyr::select(c(1:42, 49:109, 43:48)) # Read in data on the number of species threatened (Maxwell et al. 2016) maxwell.tab.s2 &lt;- read_csv(&quot;data\\\\maxwell-tab-s2.csv&quot;) %&gt;% as.data.frame() Preparing data to match our list of threat categories maxwell.tab.s2$Abbreviated_clasfication # Our threat categories: Climate Change, Habitat Loss, Overexploitation, Energy/Transportation, Pollution, Invasive Species maxwell.data_threats &lt;- maxwell.tab.s2 %&gt;% dplyr::select(3:4) %&gt;% group_by(Category) %&gt;% summarise(Total = sum(n_species_threatened)) %&gt;% mutate(Total.adjusted = replace(Total, Total %in% c(2132,11509), c(1910,7406)), adj.prop = Total.adjusted/Total, prop.total = Total.adjusted/sum(Total.adjusted)) # Habitat Loss and Energy/Transportation adjusted for compilation of multiple threats from Maxwell et al 2016. To do so, we looked at the number of species shared between threats and derived a conservative estimate accounting for overlap (species threatened by multiple threats). Data on funding # Single Category Data money.data &lt;- data[,11:(length(data)-6)]*data[,7] money.data &lt;- mutate(money.data, Year.Authorized = data$Year.Authorized, Num.Thr = data$Num.Thr, Num.Tax = data$Num.Tax) by.year.money &lt;- money.data %&gt;% group_by(Year.Authorized) %&gt;% summarize_at(vars(cat_act_area:cat_taxa_other), sum, na.rm = TRUE) %&gt;% pivot_longer(-Year.Authorized, names_to = &quot;Category&quot;, values_to = &quot;Amount&quot;) %&gt;% group_by(Year.Authorized) %&gt;% mutate(ann.percent = Amount/sum(Amount)) %&gt;% group_by(Category) %&gt;% mutate(percent = Amount/sum(Amount)) Categories used for analysis Fig. 1: Mismatch between conservation funding and threats to biodiversity fig.1.money &lt;- by.year.money %&gt;% filter(Category %in% u.threat_cat) %&gt;% group_by(Category) %&gt;% summarise(Total = sum(Amount)) rawFrame &lt;- left_join(fig.1.money, maxwell.data_threats, by = &quot;Category&quot;) %&gt;% mutate(rawMoney = Total.x) %&gt;% # Total Money mutate(rawSpecies = Total.adjusted) %&gt;% # Total Species dplyr::select(Category, rawMoney, rawSpecies) fig.1.data &lt;- left_join(fig.1.money, maxwell.data_threats, by = &quot;Category&quot;) %&gt;% mutate(Money = (Total.x/sum(Total.x))*100) %&gt;% # Percentage of Total Money mutate(Species = (Total.adjusted/sum(Total.adjusted))*100) %&gt;% # Percentage of Total Species dplyr::select(Category, Money, Species) %&gt;% pivot_longer(c(Money, Species), names_to = &quot;is.Money&quot;, values_to = &quot;Amount&quot;) %&gt;% left_join(rawFrame, by = &quot;Category&quot;) %&gt;% mutate(rawMoney = ifelse(is.Money == &quot;Species&quot;, NA, rawMoney)) %&gt;% mutate(rawSpecies= ifelse(is.Money == &quot;Money&quot;, NA, rawSpecies)) %&gt;% replace_na(list(rawMoney = &quot;&quot;, rawSpecies = &quot;&quot;)) %&gt;% unite(&quot;rawValue&quot;, rawMoney:rawSpecies, sep = &quot;&quot;, remove = FALSE) %&gt;% mutate(rawValue = as.numeric(rawValue), rawLabels = comma(rawValue)) fig.1.data$rawLabels[c(seq(1,11,2))] &lt;- str_glue(&quot;${round(rawFrame$rawMoney/1e6)}mil&quot;) fig.1.data$rawLabels[c(seq(2,12,2))] &lt;- str_glue(&quot;n = {rawFrame$rawSpecies}&quot;) fig_threats_funding&lt;- ggplot(fig.1.data, aes(fill=is.Money, y=Amount, x=Category)) + geom_col(position=&quot;dodge&quot;) + labs(x=&quot;Threat Category&quot;, y=&quot;Proportion&quot;) + scale_x_discrete(labels=u.threat_list) + scale_fill_manual(values = c(&quot;slategray4&quot;, alpha(&quot;orangered4&quot;,.9)), labels = c(&quot;Money (USD Million)&quot;, &quot;No. of Threatened Species&quot;)) + geom_text(position = position_dodge(width= 1), aes(label = rawLabels, hjust = 0.55, vjust = -0.5), angle=0, size=5) + ylim(0, 40) + theme_minimal() + theme(axis.title = element_text(size = 16, face = &quot;bold&quot;), axis.ticks.length.x = unit(.5, &quot;cm&quot;), axis.text = element_text(size = 14), legend.title = element_blank(), legend.key.size = unit(1,&quot;cm&quot;), legend.text = element_text(size = 12)) ggsave(fig_threats_funding, filename = &quot;figs\\\\Fig.1.png&quot;, width=17, height=7,dpi = 300, units=&quot;in&quot;) # show exported image knitr::include_graphics(&quot;figs/Fig.1.png&quot;) "],
["temporal-trends-in-conservation-funding.html", "Section 7 Temporal trends in conservation funding", " Section 7 Temporal trends in conservation funding # Load libraries library(tidyverse) library(scales) library(ggsci) Importing data # Read in data of post-processed grants data &lt;- read_csv(&quot;data\\\\post-processed-grants-for-analysis-unique.csv&quot;) %&gt;% as.data.frame() %&gt;% dplyr::select(c(1:42, 49:109, 43:48)) Data on funding # Single Category Data money.data &lt;- data[,11:(length(data)-6)]*data[,7] money.data &lt;- mutate(money.data, Year.Authorized = data$Year.Authorized, Num.Thr = data$Num.Thr, Num.Tax = data$Num.Tax) by.year.money &lt;- money.data %&gt;% group_by(Year.Authorized) %&gt;% summarize_at(vars(cat_act_area:cat_taxa_other), sum, na.rm = TRUE) %&gt;% pivot_longer(-Year.Authorized, names_to = &quot;Category&quot;, values_to = &quot;Amount&quot;) %&gt;% group_by(Year.Authorized) %&gt;% mutate(ann.percent = Amount/sum(Amount)) %&gt;% group_by(Category) %&gt;% mutate(percent = Amount/sum(Amount)) Categories used for analysis Colors used for plots Fig. 2: A. Temporal variation (2003-2016) in proportion of funding across unique threat categories per year fig.2a.data &lt;- by.year.money %&gt;% filter(Category %in% u.threat_cat) %&gt;% group_by(Year.Authorized) %&gt;% mutate(ann.percent = Amount/sum(Amount), alpha = rep(c(1,.5), 3)) fig.2a.plot &lt;- ggplot(fig.2a.data, aes(y = ann.percent, x = Year.Authorized)) + geom_line(size = 4, aes(color = Category, alpha = alpha), show.legend = F) + scale_color_manual(values = cat_colors22[c(1,13,11,20,5,18)], name=&quot;Threat Category&quot;, labels=u.threat_list) + labs(x=&quot;Year&quot;, y=&quot;Proportion of Funding&quot;) + # title=&quot;Proportion of Funding&quot;) + theme(panel.background = element_rect(fill = &quot;grey95&quot;), axis.title = element_text(size=20, face = &quot;bold&quot;), axis.text.x = element_text(size = 20), axis.text.y = element_text(size = 26)) ggsave(fig.2a.plot, filename = &quot;figs\\\\Fig.2A.png&quot;, width=12, height=7,dpi = 300) # show exported image knitr::include_graphics(&quot;figs/Fig.2A.png&quot;) Fig.2: B.Temporal variation in overall allocation of money across unique threat categories per year fig.2b.data &lt;- by.year.money %&gt;% filter(Category %in% u.threat_cat) fig.2b.plot &lt;- ggplot(fig.2b.data, aes(y = Amount, x = Year.Authorized, color = Category)) + geom_line(size = 2, linetype = 1) + theme_minimal() + scale_color_manual(values = cat_colors22[c(1,13,11,20,5,18)], name=&quot;Threat Category&quot;, labels=u.threat_list) + labs(x=&quot;Year&quot;, y=&quot;Money (USD Million)&quot;) + scale_y_continuous(breaks = c(0,25e6,50e6,75e6,10e7), labels = c(&quot;0&quot;,&quot;25&quot;,&quot;50&quot;,&quot;75&quot;,&quot;100&quot;), position = &quot;right&quot;) + theme(axis.text = element_text(size = 14), axis.title = element_text(size = 16, face = &quot;bold&quot;), legend.title = element_text(size = 14), legend.text = element_text(size = 12), legend.key.width = unit(1,&quot;cm&quot;), legend.spacing.x = unit(1,&quot;cm&quot;), legend.position = &quot;bottom&quot;) ggsave(fig.2b.plot, filename = &quot;figs\\\\Fig.2B.png&quot;, width=12, height=7,dpi = 300) # show exported image knitr::include_graphics(&quot;figs/Fig.2B.png&quot;) "],
["taxononmic-groupsthreats-mismatch.html", "Section 8 Taxononmic groups/Threats mismatch", " Section 8 Taxononmic groups/Threats mismatch # Load libraries library(tidyverse) library(scales) library(ggsci) For this analysis, we are using the data.multi dataframe, as amphibians/invertebrates were found to have a much higher proportion of their money coming from grants that targeted multiple taxa (e.g. taxa_amphibian + taxa_bird). As the subsequent figure shows, even using data.multi (which over-represents amphibians/invertebrates), these two categories still show major mismatches with funding. data.multi &lt;- read_csv(&quot;data\\\\post-processed-grants-for-analysis-multi.csv&quot;) %&gt;% as.data.frame() maxwell.tab.s4 &lt;- read_csv(&quot;data\\\\maxwell-tab-s4.csv&quot;) %&gt;% as.data.frame() Categories used for analysis u.threat_cat &lt;- names(data.multi)[37:42] u.taxa_cat &lt;- names(data.multi)[30:36] u.threat_list &lt;- c(&quot;Climate Change&quot;, &quot;Energy/Transportation&quot;, &quot;Habitat Loss&quot;, &quot;Invasive Species&quot;, &quot;Overexploitation&quot;, &quot;Pollution&quot;) u.taxa_list &lt;- c(&quot;Amphibians&quot;, &quot;Birds&quot;, &quot;Fish&quot;, &quot;Invertebrates&quot;, &quot;Mammals&quot;, &quot;Plants&quot;, &quot;Reptiles&quot;) Colors used for plots Data on funding # Multi-category Data money.data.multi &lt;- data.multi[,11:(length(data.multi)-6)]*data.multi[,7] money.data.multi &lt;- mutate(money.data.multi, Year.Authorized = data.multi$Year.Authorized, Num.Thr = data.multi$Num.Thr, Num.Tax = data.multi$Num.Tax) by.year.money.multi &lt;- money.data.multi %&gt;% group_by(Year.Authorized) %&gt;% summarize_at(vars(cat_act_area:cat_threat_pollution), sum, na.rm = TRUE) %&gt;% pivot_longer(-Year.Authorized, names_to = &quot;Category&quot;, values_to = &quot;Amount&quot;) %&gt;% group_by(Category) %&gt;% mutate(percent = Amount/sum(Amount)) Fig. 3: Threat/taxonomic group mismatch in terms of conservation funding and number of threatened species Maxwell et al. 2016’s taxonomic designations are at a higher resolution than the what we need, so we compiled several categories to fit the taxonomic scale we’re operating at, which includes 6 categories (Amphibians, Birds, Fish, Invertebrates, Mammals, Plants, Reptiles). names(maxwell.tab.s4)[4:18] # Our species: Amphibians, Birds, Fish, Invertebrates, Mammals, Plants, Reptiles maxwell.data_species_threats &lt;- maxwell.tab.s4 %&gt;% slice(1:10) %&gt;% mutate(Amphibians = Amphibia, Birds = Aves, Fish = Actinopterygii + Chondrichthyes, Invertebrates = Anthozoa + Gastropoda + Hydrozoa + Malacostraca + Myxini, Mammals = Mammalia, Plants = Cycadopsida + Liliopsida + Magnoliopsida + Pinopsida, Reptiles = Reptilia) %&gt;% dplyr::select(c(3,20:ncol(.))) %&gt;% group_by(Threat) %&gt;% summarise_at(vars(Amphibians:Reptiles), sum) %&gt;% mutate(Threat = u.threat_list) Figure 3 # Preparing maxwell data fig.3.maxwell_data &lt;- maxwell.data_species_threats %&gt;% pivot_longer(Amphibians:Reptiles, names_to = &quot;Taxon&quot;, values_to = &quot;n_threatened&quot;) %&gt;% group_by(Threat) %&gt;% mutate(Percent = 100*n_threatened/sum(n_threatened), Source = &quot;IUCN&quot;, direction = -1) %&gt;% dplyr::select(-n_threatened) # Preparing data on funding taxa_climate &lt;- money.data.multi %&gt;% filter(cat_threat_climate &gt; 0) %&gt;% dplyr::select(cat_taxa_amphibian:cat_taxa_reptile) %&gt;% pivot_longer(cat_taxa_amphibian:cat_taxa_reptile, names_to = &quot;Category&quot;, values_to = &quot;Money&quot;) %&gt;% group_by(Category) %&gt;% summarize(totalAmount = sum(Money)) %&gt;% mutate(perc = totalAmount/sum(totalAmount)) %&gt;% dplyr::select(perc) %&gt;% t() %&gt;% as.data.frame(row.names = &quot;cat_threat_climate&quot;) %&gt;% `colnames&lt;-` (u.taxa_list) taxa_energy &lt;- money.data.multi %&gt;% filter(cat_threat_energytransport &gt; 0) %&gt;% dplyr::select(cat_taxa_amphibian:cat_taxa_reptile) %&gt;% pivot_longer(cat_taxa_amphibian:cat_taxa_reptile, names_to = &quot;Category&quot;, values_to = &quot;Money&quot;) %&gt;% group_by(Category) %&gt;% summarize(totalAmount = sum(Money)) %&gt;% mutate(perc = totalAmount/sum(totalAmount)) %&gt;% dplyr::select(perc) %&gt;% t() %&gt;% as.data.frame(row.names = &quot;cat_threat_energytransport&quot;) %&gt;% `colnames&lt;-` (u.taxa_list) taxa_habitat &lt;- money.data.multi %&gt;% filter(cat_threat_habitat &gt; 0) %&gt;% dplyr::select(cat_taxa_amphibian:cat_taxa_reptile) %&gt;% pivot_longer(cat_taxa_amphibian:cat_taxa_reptile, names_to = &quot;Category&quot;, values_to = &quot;Money&quot;) %&gt;% group_by(Category) %&gt;% summarize(totalAmount = sum(Money)) %&gt;% mutate(perc = totalAmount/sum(totalAmount)) %&gt;% dplyr::select(perc) %&gt;% t() %&gt;% as.data.frame(row.names = &quot;cat_threat_habitat&quot;) %&gt;% `colnames&lt;-` (u.taxa_list) taxa_inv &lt;- money.data.multi %&gt;% filter(cat_threat_inv_spec &gt; 0) %&gt;% dplyr::select(cat_taxa_amphibian:cat_taxa_reptile) %&gt;% pivot_longer(cat_taxa_amphibian:cat_taxa_reptile, names_to = &quot;Category&quot;, values_to = &quot;Money&quot;) %&gt;% group_by(Category) %&gt;% summarize(totalAmount = sum(Money)) %&gt;% mutate(perc = totalAmount/sum(totalAmount)) %&gt;% dplyr::select(perc) %&gt;% t() %&gt;% as.data.frame(row.names = &quot;cat_threat_inv_spec&quot;) %&gt;% `colnames&lt;-` (u.taxa_list) taxa_overexp &lt;- money.data.multi %&gt;% filter(cat_threat_overexp &gt; 0) %&gt;% dplyr::select(cat_taxa_amphibian:cat_taxa_reptile) %&gt;% pivot_longer(cat_taxa_amphibian:cat_taxa_reptile, names_to = &quot;Category&quot;, values_to = &quot;Money&quot;) %&gt;% group_by(Category) %&gt;% summarize(totalAmount = sum(Money)) %&gt;% mutate(perc = totalAmount/sum(totalAmount)) %&gt;% dplyr::select(perc) %&gt;% t() %&gt;% as.data.frame(row.names = &quot;cat_threat_overexp&quot;) %&gt;% `colnames&lt;-` (u.taxa_list) taxa_pollution &lt;- money.data.multi %&gt;% filter(cat_threat_pollution &gt; 0) %&gt;% dplyr::select(cat_taxa_amphibian:cat_taxa_reptile) %&gt;% pivot_longer(cat_taxa_amphibian:cat_taxa_reptile, names_to = &quot;Category&quot;, values_to = &quot;Money&quot;) %&gt;% group_by(Category) %&gt;% summarize(totalAmount = sum(Money)) %&gt;% mutate(perc = totalAmount/sum(totalAmount)) %&gt;% dplyr::select(perc) %&gt;% t() %&gt;% as.data.frame(row.names = &quot;cat_threat_pollution&quot;) %&gt;% `colnames&lt;-` (u.taxa_list) fig.3.money_data &lt;- bind_rows(taxa_climate, taxa_energy, taxa_habitat, taxa_inv, taxa_overexp, taxa_pollution) %&gt;% transmute_all(~.*100) %&gt;% mutate(Threat = u.threat_list) %&gt;% dplyr::select(8, 1:7) %&gt;% pivot_longer(Amphibians:Reptiles, names_to = &quot;Taxon&quot;, values_to = &quot;Percent&quot;) %&gt;% mutate(Source = &quot;Money&quot;, direction = 1) # Assembling data for plot fig.3.data &lt;- bind_rows(fig.3.money_data, fig.3.maxwell_data) %&gt;% mutate(Percent = Percent * direction, Taxon = factor(Taxon, levels = c(&quot;Reptiles&quot;, &quot;Amphibians&quot;, &quot;Invertebrates&quot;, &quot;Birds&quot;, &quot;Mammals&quot;, &quot;Fish&quot;, &quot;Plants&quot;), ordered = TRUE), Threat = factor(Threat, levels = c(&quot;Climate Change&quot;, &quot;Overexploitation&quot;, &quot;Habitat Loss&quot;, &quot;Energy/Transportation&quot;, &quot;Pollution&quot;, &quot;Invasive Species&quot;), ordered = TRUE)) # Removing reptiles fig.3.plot &lt;- ggplot(fig.3.data %&gt;% filter(Taxon != &quot;Reptiles&quot;), aes(x = Taxon, y = Percent, fill = Taxon)) + geom_col(show.legend = F , color = &quot;black&quot;) + geom_hline(yintercept = 0, size = 1.2) + scale_fill_manual(values = cat_colors22[c(9,20,19,15,7,11)], name = &quot;Taxononmic Group&quot;, labels = u.taxa_list) + facet_wrap(~Threat) + theme_bw() + theme(axis.ticks.y= element_blank(), axis.text.x = element_blank(), axis.ticks.x=element_line(color=NA), strip.background = element_rect(fill = &quot;black&quot;), strip.text = element_text(size = 12, color = &quot;white&quot;, face = &quot;bold&quot;)) + ylim(-90,90) + # ggtitle(&quot;Percent of Taxa Threatened (IUCN) by vs. Funded for Threats (multi)&quot;) + ylab(&quot;% Threatened | % Funding&quot;) + coord_flip() ggsave(fig.3.plot, filename = &quot;figs\\\\Fig.3.png&quot;, width=12, height=7,dpi = 300) # show exported image knitr::include_graphics(&quot;figs/Fig.3.png&quot;) "],
["network-analysis.html", "Section 9 Network Analysis", " Section 9 Network Analysis # Load libraries library(tidyverse) library(scales) library(ggsci) data &lt;- read_csv(&quot;data\\\\post-processed-grants-for-analysis-unique.csv&quot;) %&gt;% as.data.frame() data.multi &lt;- read_csv(&quot;data\\\\post-processed-grants-for-analysis-multi.csv&quot;) %&gt;% as.data.frame() Calculate the overlap in funding between threat categories The above overlap in funding data was used in Python to run the network analysis followed by creation of piecharts within R import numpy as np import pandas as pd import igraph as ig import chart_studio.plotly as py import plotly.graph_objs as go from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot from IPython.display import Image # Helper functions def dist(A, B): return np.linalg.norm(np.array(A)-np.array(B)) def get_idx_interv(d, D): k=0 while(d&gt;D[k]): k+=1 return k-1 def deCasteljau(b,t): N=len(b) if(N&lt;2): raise InvalidInputError(&quot;The control polygon must have at least two points&quot;) a=np.copy(b) #shallow copy of the list of control points for r in range(1,N): a[:N-r,:]=(1-t)*a[:N-r,:]+t*a[1:N-r+1,:] return a[0,:] def BezierCv(b, nr=5): t=np.linspace(0, 1, nr) return np.array([deCasteljau(b, t[k]) for k in range(nr)]) Dist=[0, dist([1,0], 2*[np.sqrt(2)/2]), np.sqrt(2), dist([1,0], [-np.sqrt(2)/2, np.sqrt(2)/2]), 2.0] params=[1.2, 1.5, 1.8, 2.1] # Read the data file df = pd.read_csv(&#39;data/threat-network-data.csv&#39;) categories = list(set(df[&#39;A&#39;].tolist() + df[&#39;B&#39;].tolist())) # Remove edges which have a contribution of less than 2000000 df.loc[df[&#39;n&#39;] &lt; 2000000, &#39;n&#39;] = 0.0 Create the graph network g = ig.Graph.Full(len(categories)) g.vs[&#39;name&#39;] = categories g.es[&quot;weight&quot;] = 0.0 for idx, row in df.iterrows(): if row[&#39;A&#39;] == row[&#39;B&#39;]: continue # Scale the contribution by a factor of 60000 g[row[&#39;A&#39;], row[&#39;B&#39;]] += row[&#39;n&#39;]/60000.0 g.es.select(weight=0.0).delete() layt = g.layout(&#39;circular&#39;) #circular layout Weights = list(map(int, g.es[&quot;weight&quot;])) V=list(g.vs) labels=[v[&#39;name&#39;] for v in V] E=[e.tuple for e in g.es]# list of edges node_color=[&#39;#FF0000&#39; for v in g.vs] line_color=[&#39;rgb(342,342,342)&#39; for v in g.vs] edge_colors=[&#39;#000000&#39;,&#39;#000000&#39;, &#39;#000000&#39;, &#39;#000000&#39;] Xn=[layt[k][0] for k in range(len(layt))] Yn=[layt[k][1] for k in range(len(layt))] lines=[] # the list of dicts defining edge Plotly attributes edge_info=[] # the list of points on edges where the information is placed # Percentage contrbutions of every category marker_size_dict = {} marker_size_dict[&#39;OE&#39;] = 0.3588109538682985 marker_size_dict[&#39;IS&#39;] = 0.08341313937829264 marker_size_dict[&#39;CC&#39;] = 0.3027677823015496 marker_size_dict[&#39;ET&#39;] = 0.08004130412646482 marker_size_dict[&#39;P&#39;] = 0.052836471758225034 marker_size_dict[&#39;HL&#39;] = 0.1221303485671694 # Marker sizes based on Percentage contributions threat_marker_size = [] for label in labels: threat_marker_size.append(marker_size_dict[label]) for idx in range(len(threat_marker_size)): threat_marker_size[idx] = np.log(threat_marker_size[idx]*100)*40 Plot the network analysis for j, e in enumerate(E): A=np.array(layt[e[0]]) B=np.array(layt[e[1]]) d=dist(A, B) K=get_idx_interv(d, Dist) b=[A, A/params[K], B/params[K], B] color=edge_colors[K] pts=BezierCv(b, nr=5) text=V[e[0]][&#39;name&#39;]+&#39; to &#39;+V[e[1]][&#39;name&#39;]+&#39; &#39;+str(Weights[j])+&#39; x100000&#39; mark=deCasteljau(b,0.9) edge_info.append(go.Scatter(x=[mark[0]], y=[mark[1]], mode=&#39;markers&#39;, marker=dict(size=0.5, color=edge_colors), text=None, hoverinfo=&#39;text&#39; )) lines.append(go.Scatter(x=pts[:,0], y=pts[:,1], mode=&#39;lines&#39;, line=dict(color=color, shape=&#39;spline&#39;, width=Weights[j]/100#The width is proportional to the edge weight ), text=str(Weights[j]), hoverinfo=&#39;text&#39; ) ) race2=go.Scatter(x=Xn, y=Yn, mode=&#39;markers+text&#39;, name=&#39;&#39;, marker=dict(symbol=&#39;circle&#39;, size=threat_marker_size, color=node_color, line=dict(color=line_color, width=0.5) ), text=labels, hoverinfo=&#39;text&#39;, ) axis=dict(showline=False, # hide axis line, grid, ticklabels and title zeroline=False, showgrid=False, showticklabels=False, title=&#39;&#39; ) width=800 height=850 layout=go.Layout(title= &#39;Threat Overlap&#39;, font= dict(size=20), showlegend=False, autosize=True, width=width, height=height, xaxis=dict(axis), yaxis=dict(axis), margin=dict(l=20, r=20, b=85, t=100, ), hovermode=&#39;closest&#39;, paper_bgcolor=&#39;rgba(0,0,0,0)&#39;, plot_bgcolor=&#39;rgba(0,0,0,0)&#39; ) data=lines+edge_info+[trace2] fig=go.Figure(data=data, layout=layout) The above figure was exported out of Python to create corresponding piecharts for Fig. 4 Pie Charts for proportion of money shared between threat sub-categories blank_theme &lt;- theme_minimal() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), panel.border = element_blank(), panel.grid = element_blank(), axis.ticks = element_blank(), plot.title=element_text(size=14, face=&quot;bold&quot;)) Data on funding # Multi-category Data money.data.multi &lt;- data.multi[,11:(length(data.multi)-6)]*data.multi[,7] money.data.multi &lt;- mutate(money.data.multi, Year.Authorized = data.multi$Year.Authorized, Num.Thr = data.multi$Num.Thr, Num.Tax = data.multi$Num.Tax) by.year.money.multi &lt;- money.data.multi %&gt;% group_by(Year.Authorized) %&gt;% summarize_at(vars(cat_act_area:cat_threat_pollution), sum, na.rm = TRUE) %&gt;% pivot_longer(-Year.Authorized, names_to = &quot;Category&quot;, values_to = &quot;Amount&quot;) %&gt;% group_by(Category) %&gt;% mutate(percent = Amount/sum(Amount)) Climate pie.Nthreats_climate &lt;- money.data.multi %&gt;% filter(cat_threat_climate &gt; 0) %&gt;% dplyr::select(Num.Thr, cat_threat_climate) %&gt;% mutate(Num.Thr = as.factor(Num.Thr)) %&gt;% group_by(Num.Thr) %&gt;% summarise(Total.money = sum(cat_threat_climate)) %&gt;% mutate(perc = Total.money/sum(Total.money)) plot.pie.Nthreats_climate &lt;- ggplot(pie.Nthreats_climate, aes(y = perc, x = &quot;&quot;, fill = Num.Thr)) + geom_bar(stat = &quot;identity&quot;, color = &quot;white&quot;) + theme_minimal() + scale_fill_manual(values = seq_gradient_pal(cat_colors22[1], &quot;white&quot;, &quot;Lab&quot;)(seq(0,1, length.out = 5))) + labs(title=&quot;Proportion of Climate Change Funding Shared Between Other Threat Categories&quot;) + coord_polar(&quot;y&quot;, start=0, direction = -1) + blank_theme + theme(axis.text.x = element_blank()) + geom_text(aes(x = c(rep(1.55,4), 1.65), label = paste0(round(perc*100,1), &quot;%&quot;)), position = position_stack(vjust = 0.5), size = 3, col = &quot;black&quot;) ggsave(plot.pie.Nthreats_climate, filename = &quot;figs\\\\fig_pie_climate.png&quot;, width=12, height=7,dpi = 300) # show exported image knitr::include_graphics(&quot;figs/fig_pie_climate.png&quot;) Energy/Transportation pie.Nthreats_energytransport &lt;- money.data.multi %&gt;% filter(cat_threat_energytransport &gt; 0) %&gt;% dplyr::select(Num.Thr, cat_threat_energytransport) %&gt;% mutate(Num.Thr = as.factor(Num.Thr)) %&gt;% group_by(Num.Thr) %&gt;% summarise(Total.money = sum(cat_threat_energytransport)) %&gt;% mutate(perc = Total.money/sum(Total.money)) plot.pie.Nthreats_energytransport &lt;- ggplot(pie.Nthreats_energytransport, aes(y = perc, x = &quot;&quot;, fill = Num.Thr)) + geom_bar(stat = &quot;identity&quot;, color = &quot;white&quot;) + theme_minimal() + scale_fill_manual(values = seq_gradient_pal(cat_colors22[13], &quot;black&quot;, &quot;Lab&quot;)(seq(0,1, length.out = 5))) + labs(title=&quot;Proportion of Energy/Transportation Funding Shared Between Other Threat Categories&quot;) + coord_polar(&quot;y&quot;, start=0, direction = -1) + blank_theme + theme(axis.text.x = element_blank()) + geom_text(aes(x = c(rep(1.55,4), 1.65), label = paste0(round(perc*100,1), &quot;%&quot;)), position = position_stack(vjust = 0.5), size = 3, col = &quot;black&quot;) ggsave(plot.pie.Nthreats_energytransport, filename = &quot;figs\\\\fig_pie_energytransport.png&quot;, width=12, height=7,dpi = 300) # show exported image knitr::include_graphics(&quot;figs/fig_pie_energytransport.png&quot;) Habitat Loss pie.Nthreats_habitat &lt;- money.data.multi %&gt;% filter(cat_threat_habitat &gt; 0) %&gt;% dplyr::select(Num.Thr, cat_threat_habitat) %&gt;% mutate(Num.Thr = as.factor(Num.Thr)) %&gt;% group_by(Num.Thr) %&gt;% summarise(Total.money = sum(cat_threat_habitat)) %&gt;% mutate(perc = Total.money/sum(Total.money)) plot.pie.Nthreats_habitat &lt;- ggplot(pie.Nthreats_habitat, aes(y = perc, x = &quot;&quot;, fill = Num.Thr)) + geom_bar(stat = &quot;identity&quot;, color = &quot;white&quot;) + theme_minimal() + scale_fill_manual(values = seq_gradient_pal(cat_colors22[11], &quot;white&quot;, &quot;Lab&quot;)(seq(0,1, length.out = 5))) + labs(title=&quot;Proportion of Habitat Loss Funding Shared Between Other Threat Categories&quot;) + coord_polar(&quot;y&quot;, start=0, direction = -1) + blank_theme + theme(axis.text.x = element_blank()) + geom_text(aes(x = c(rep(1.55,4)), label = paste0(round(perc*100,1), &quot;%&quot;)), position = position_stack(vjust = 0.5), size = 3, col = &quot;black&quot;) ggsave(plot.pie.Nthreats_habitat, filename = &quot;figs\\\\fig_pie_habitatloss.png&quot;, width=12, height=7,dpi = 300) # show exported image knitr::include_graphics(&quot;figs/fig_pie_habitatloss.png&quot;) Invasive Species pie.Nthreats_inv_spec &lt;- money.data.multi %&gt;% filter(cat_threat_inv_spec &gt; 0) %&gt;% dplyr::select(Num.Thr, cat_threat_inv_spec) %&gt;% mutate(Num.Thr = as.factor(Num.Thr)) %&gt;% group_by(Num.Thr) %&gt;% summarise(Total.money = sum(cat_threat_inv_spec)) %&gt;% mutate(perc = Total.money/sum(Total.money)) plot.pie.Nthreats_inv_spec &lt;- ggplot(pie.Nthreats_inv_spec, aes(y = perc, x = &quot;&quot;, fill = Num.Thr)) + geom_bar(stat = &quot;identity&quot;, color = &quot;white&quot;) + theme_minimal() + scale_fill_manual(values = seq_gradient_pal(cat_colors22[20], &quot;white&quot;, &quot;Lab&quot;)(seq(0,1, length.out = 5))) + labs(title=&quot;Proportion of Invasive Species Funding Shared Between Other Threat Categories&quot;) + coord_polar(&quot;y&quot;, start=0, direction = -1) + blank_theme + theme(axis.text.x = element_blank()) + geom_text(aes(x = c(rep(1.55,4), 1.65), label = paste0(round(perc*100,1), &quot;%&quot;)), position = position_stack(vjust = 0.5), size = 3, col = &quot;black&quot;) ggsave(plot.pie.Nthreats_inv_spec, filename = &quot;figs\\\\fig_pie_invasiveSpecies.png&quot;, width=12, height=7,dpi = 300) # show exported image knitr::include_graphics(&quot;figs/fig_pie_invasiveSpecies.png&quot;) Overexploitation pie.Nthreats_overexp &lt;- money.data.multi %&gt;% filter(cat_threat_overexp &gt; 0) %&gt;% dplyr::select(Num.Thr, cat_threat_overexp) %&gt;% mutate(Num.Thr = as.factor(Num.Thr)) %&gt;% group_by(Num.Thr) %&gt;% summarise(Total.money = sum(cat_threat_overexp)) %&gt;% mutate(perc = Total.money/sum(Total.money)) plot.pie.Nthreats_overexp &lt;- ggplot(pie.Nthreats_overexp, aes(y = perc, x = &quot;&quot;, fill = Num.Thr)) + geom_bar(stat = &quot;identity&quot;, color = &quot;white&quot;) + theme_minimal() + scale_fill_manual(values = seq_gradient_pal(cat_colors22[5], &quot;white&quot;, &quot;Lab&quot;)(seq(0,1, length.out = 5))) + labs(title=&quot;Proportion of Overexploitation Funding Shared Between Other Threat Categories&quot;) + coord_polar(&quot;y&quot;, start=0, direction = -1) + blank_theme + theme(axis.text.x = element_blank()) + geom_text(aes(x = c(rep(1.55,4), 1.65), label = str_glue(&quot;{round(perc*100,1)}%&quot;)), position = position_stack(vjust = 0.5), size = 3, col = &quot;black&quot;) ggsave(plot.pie.Nthreats_overexp, filename = &quot;figs\\\\fig_pie_overexploitation.png&quot;, width=12, height=7,dpi = 300) # show exported image knitr::include_graphics(&quot;figs/fig_pie_overexploitation.png&quot;) Pollution pie.Nthreats_pollution &lt;- money.data.multi %&gt;% filter(cat_threat_pollution &gt; 0) %&gt;% dplyr::select(Num.Thr, cat_threat_pollution) %&gt;% mutate(Num.Thr = as.factor(Num.Thr)) %&gt;% group_by(Num.Thr) %&gt;% summarise(Total.money = sum(cat_threat_pollution)) %&gt;% mutate(perc = Total.money/sum(Total.money)) plot.pie.Nthreats_pollution &lt;- ggplot(pie.Nthreats_pollution, aes(y = perc, x = &quot;&quot;, fill = Num.Thr)) + geom_bar(stat = &quot;identity&quot;, color = &quot;white&quot;) + theme_minimal() + scale_fill_manual(values = seq_gradient_pal(cat_colors22[18], &quot;white&quot;, &quot;Lab&quot;)(seq(0,1, length.out = 5))) + labs(title=&quot;Proportion of Pollution Funding Shared Between Other Threat Categories&quot;) + coord_polar(&quot;y&quot;, start=0, direction = -1) + blank_theme + theme(axis.text.x = element_blank()) + geom_text(aes(x = c(rep(1.55,4), 1.65), label = paste0(round(perc*100,1), &quot;%&quot;)), position = position_stack(vjust = 0.5), size = 3, col = &quot;black&quot;) ggsave(plot.pie.Nthreats_pollution, filename = &quot;figs\\\\fig_pie_pollution.png&quot;, width=12, height=7,dpi = 300) # show exported image knitr::include_graphics(&quot;figs/fig_pie_pollution.png&quot;) "]
]
