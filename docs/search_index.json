[
["index.html", "Conservation funding does not track drivers of biodiversity loss Section 1 Introduction 1.1 Attribution 1.2 Data access 1.3 Data processing 1.4 Affiliations", " Conservation funding does not track drivers of biodiversity loss Vijay Ramesh1*, Jay Schoen1, Michael Levin1, Pratik Dubal2, Rochelle Thomas1, Sebastian Heilpern1, Jared Meek1, Pooja Choksi1, Don J Melnick1, Sara Kross1\" 2020-09-17 Section 1 Introduction This is the bookdown version of a repository that contains code and analyses associated with Ramesh et. al. (in review). 1.1 Attribution Please contact the following in case of interest in the project. Vijay Ramesh (lead author) PhD student, Columbia University 1.2 Data access The following files are required to reproduce our analysis. all-grants.csv: A sheet containing all grant data. list-of-preprocessing-phrases.csv: A sheet containing phrases which need to removed before classification. list-of-keywords.csv: A sheet containing keywords which will be used to perform the rule-based classification. list-of-stopwords.csv: A sheet containing stopwords, which need to be used to post-process and filter the classification results. 1.3 Data processing The data processing for this project is described in the following sections. Navigate through them using the links in the sidebar. 1.4 Affiliations 1Department of Ecology, Evolution and Environmental Biology, Columbia University, 1200 Amsterdam Avenue, New York, NY 10027. 2Department of Computer Science, Columbia University, New York, NY 10027. *Corresponding author. Email: vr2352@columbia.edu "],
["pre-processing-and-filtering-of-grants.html", "Section 2 Pre-processing and filtering of grants 2.1 Here, we will filter our list our grants using our pre-processing phrases and use our list of keywords to carry out our rule-based classification 2.2 Preprocessing to remove grants which are empty, operating support, etc.", " Section 2 Pre-processing and filtering of grants 2.1 Here, we will filter our list our grants using our pre-processing phrases and use our list of keywords to carry out our rule-based classification import re import csv import tqdm import numpy as np import pandas as pd def string_found(string1, string2): if re.search(r&quot;\\b&quot; + re.escape(string1) + r&quot;\\b&quot;, string2): return True return False 2.2 Preprocessing to remove grants which are empty, operating support, etc. data = pd.read_csv(&#39;~/data/all-grants.csv&#39;) preproc_ph = pd.read_csv(&#39;~data/list-of-preprocessing-phrases.csv&#39;) preproc_phrases = list(preproc_ph.Phrases) data = data.drop([ele for ele in data.columns.to_list() if ele not in [&#39;Description&#39;]], axis=1) data = data.dropna().reset_index(drop=True) for phrase in preproc_phrases[:6]: data = data[~data.Description.str.contains(phrase)] for phrase in preproc_phrases[6:]: data = data[data.Description.str.lower() != phrase] data_sentences = data.Description.values.tolist() data_sentences = [x.lower() for x in data_sentences] # Bigrams/Keywords to be searched as substrings in description keywords_df = pd.read_csv(&#39;~data/list-of-keywords.csv&#39;) category_names = [x.strip() for x in list(keywords_df)] keywords = [] for idx in range(len(category_names)): keywords.append(list(set(keywords_df[category_names[idx]].dropna()))) grant_categories = [] grant_keywords = [] pbar = tqdm.tqdm(total=len(data_sentences)) for grant in data_sentences: curr_cat = [] curr_key = [] for idx in range(len(category_names)): for keyword in keywords[idx]: if string_found(keyword, grant): curr_key.append(keyword.replace(&#39; &#39;, &#39;_&#39;)) curr_cat.append(category_names[idx]) grant_categories.append(curr_cat) grant_keywords.append(curr_key) pbar.update(1) pbar.close() # Store description, keywords and categories as csv output_grants = [] pbar = tqdm.tqdm(total=len(data_sentences)) for idx in range(len(data_sentences)): temp = [] temp.append(data_sentences[idx]) temp.append(&quot;|&quot;.join(grant_keywords[idx])) temp.append(&quot;|&quot;.join(grant_categories[idx])) output_grants.append(temp) pbar.update(1) pbar.close() with open(&quot;~data/output-grants.csv&quot;, &quot;w&quot;, newline=&quot;&quot;) as f: writer = csv.writer(f) writer.writerow([&#39;Description&#39;, &#39;Keywords&#39;, &#39;Categories&#39;]) writer.writerows(output_grants) "],
["filtering.html", "Section 3 Post-Validation Filtering 3.1 Fixing algorithm errors discovered post-validation 3.2 Remove grants with no associated dollar amount 3.3 Filtering Aquarium/Zoo Grants 3.4 Here, we will use a list of stopwords to further refine our output from our classification", " Section 3 Post-Validation Filtering 3.1 Fixing algorithm errors discovered post-validation Here we hard-coded several specific fixes to the classification that repeatedly cropped up during our validation process. All have been checked to have 0 mis-classifications. # Removing grants containing &quot;dinner&quot; dat &lt;- dat %&gt;% filter(str_detect(Description, &quot;dinner&quot;) == FALSE) # Classifying &quot;dissemination&quot; as act_edu sum(dat$cat_act_edu) for(i in 1:nrow(dat)) { if(str_detect(dat$Description[i], &quot;dissemination&quot;) == TRUE) { dat$cat_act_edu[i] = 1 } } sum(dat$cat_act_edu) # Removing threat_energytransport classification for &quot;palm oil&quot; sum(dat$cat_threat_energytransport) for(i in 1:nrow(dat)) { if(str_detect(dat$Description[i], &quot;palm oil|oil-palm|oil palm&quot;) == TRUE) { dat$cat_threat_energytransport[i] = 0 } } sum(dat$cat_threat_energytransport) # Removing hab_other classification for &quot;aquatic&quot; (will be freshwater/marine) sum(dat$cat_habitat_other) for(i in 1:nrow(dat)) { if(str_detect(dat$Description[i], &quot;aquatic&quot;) == TRUE) { dat$cat_habitat_other[i] = 0 } } sum(dat$cat_habitat_other) 3.2 Remove grants with no associated dollar amount Those grants with no funding amount recorded contributed nothing to this analysis, and were removed. dat.1 &lt;- dat %&gt;% drop_na(Grant.Amount) %&gt;% dplyr::select(1:42) names(dat.1) 3.3 Filtering Aquarium/Zoo Grants Any funding from grants classified as Aquarium/Zoo, regardless of other categories it was also associated with, was limited to to the Aquarium/Zoo category. This is because… There was one exception to this: if classified into social justice, the the funding was counted in that category. This is because… for(i in 1:nrow(dat.1)){ if(dat.1$cat_aquarium_zoo[i]==1){ dat.1[i,c(11:17, 19:28, 30:42)]=0 } } 3.4 Here, we will use a list of stopwords to further refine our output from our classification import re import csv import tqdm import numpy as np import pandas as pd def string_found(string1, string2): if re.search(r&quot;\\b&quot; + re.escape(string1) + r&quot;\\b&quot;, string2): return True return False output_grants = &#39;~data/output-grants.csv&#39; stopwords_csv = &#39;~data/list-of-stopwords.csv&#39; output_filtered = &#39;~data/output-grants-filtered.csv.csv&#39; output_data = pd.read_csv(output_grants) output_data[&#39;Stopwords&#39;] = &quot;-&quot; output_data[&#39;Filtered_Categories&#39;] = &quot;-&quot; stopwords_df = pd.read_csv(stopwords_csv) stopwords_dict = dict() for cat in [x.strip() for x in list(stopwords_df)]: temp = list(set(stopwords_df[cat].dropna())) temp = [x.lower() for x in temp] stopwords_dict[cat] = temp pbar = tqdm.tqdm(total=len(output_data)) for idx in range(len(output_data)): class_cats = list(output_data.iloc[idx][&#39;Categories&#39;].split(&#39;|&#39;)) stop_added = [] flag = False for stop_cat in stopwords_dict.keys(): if stop_cat in class_cats: for stopword in stopwords_dict[stop_cat]: if string_found(stopword, output_data.iloc[idx][&#39;Description&#39;].lower()): class_cats.remove(stop_cat) stop_added.append(stopword) break output_data.loc[idx,&#39;Filtered_Categories&#39;] = &#39;|&#39;.join(list(set(class_cats))) if len(stop_added) &gt; 0: output_data.loc[idx, &#39;Stopwords&#39;] = &#39;|&#39;.join(list(set(stop_added))) pbar.update(1) pbar.close() output_data[output_data.Stopwords != &#39;-&#39;] output_data.to_csv(output_filtered, index=False) "],
["multiCatFilter.html", "Section 4 Multi-category Filtering 4.1 Adding Category Sum columns 4.2 Export Multi-category file 4.3 Preparing a final datafame for analysis of threats, taxonomic groups and proportion of funding", " Section 4 Multi-category Filtering The code below governs the way we dealt with multiple, potentially overlapping categories on individual grants. The general format is as follows: Grants with &gt;2 independent classfications (i.e. habitat_terrestrial, habitat_marine, and habitat_freshwater) are reclassified as “other” within their broader categories (i.e. habitat_other). Grants with 2 independent classifications (i.e. habitat_terrestrial and habitat_marine) are classified into a separate, joint classification within their broader categories (i.e. habitat_MarineTerrestrial). Those grants with shared independent and joint classifications default to the joint category described above. 4.1 Adding Category Sum columns The above rules are built on dummy variables that take the sum of our binary classification data across the columns of each broader category. dat.1 &lt;- dat.1 %&gt;% mutate(Num.Class = rowSums(.[,11:length(.)])) %&gt;% mutate(Num.Thr = rowSums(.[37:42])) %&gt;% mutate(Num.Act = rowSums(.[11:17])) %&gt;% mutate(Num.Hab = rowSums(.[c(25,26,28)])) %&gt;% mutate(Num.Tax = rowSums(.[30:36])) %&gt;% mutate(Num.Bio = rowSums(.[19:20])) 4.2 Export Multi-category file The foundation of this multi-category dataset is exported prior to the full multi-category processing to provide a dataset more suited to the network analysis. # Export file before category mutli-category processing for network analysis dat.1.multi &lt;- dat.1 write_csv(dat.1.multi, &quot;~/Desktop/master_output_data_analysis_v15_mutlicategories.csv&quot;) 4.2.1 Multi-category Filtering: Habitat Categories hab &lt;- dat.1[,c(1:10,22:28)] # Marine-Terrestrial for(i in 1:nrow(hab)){ if(hab$cat_habitat_marine[i]==1 &amp; hab$cat_habitat_terrestrial[i]==1) { hab$cat_habitat_MarineTerrestrial[i]=1} if(hab$cat_habitat_MarineTerrestrial[i] == 1) { hab$cat_habitat_marine[i]=0 hab$cat_habitat_terrestrial[i]=0 } } # Marine-Freshwater for(i in 1:nrow(hab)){ if(hab$cat_habitat_marine[i]==1 &amp; hab$cat_habitat_freshwater[i]==1) { hab$cat_habitat_FreshwaterMarine[i]=1} if(hab$cat_habitat_FreshwaterMarine[i] == 1) { hab$cat_habitat_marine[i]=0 hab$cat_habitat_freshwater[i]=0 } } # Freshwater-Terrestrial for(i in 1:nrow(hab)){ if(hab$cat_habitat_terrestrial[i]==1 &amp; hab$cat_habitat_freshwater[i]==1) { hab$cat_habitat_FreshwaterTerrestrial[i]=1} if(hab$cat_habitat_FreshwaterTerrestrial[i] == 1) { hab$cat_habitat_terrestrial[i]=0 hab$cat_habitat_freshwater[i]=0 } } ## Check sum(hab$cat_habitat_other) sum(hab$cat_habitat_terrestrial) # Habitat other (&gt;2 categories) for(i in 1:nrow(hab)){ if(sum(hab[i,c(11:15,17)]) &gt; 1){ hab$cat_habitat_other[i] = 1 hab[i, c(11:15,17)] = 0 } } ## Check sum(hab$cat_habitat_other) sum(hab$cat_habitat_terrestrial) # If hab_other, no other habitat classification for(i in 1:nrow(hab)){ if(hab$cat_habitat_other[i]==1) { hab[i,c(11:15,17)] = 0 } } ## Check sum(hab$cat_habitat_other) sum(hab$cat_habitat_terrestrial) sum(dat.1$cat_habitat_freshwater) sum(hab$cat_habitat_freshwater) # Huge change in freshwater number here, showing freshwater classified with other categories a lot ### Join filtered habitat columns with original data data.final &lt;- dat.1 names(data.final) data.final[,22:28] &lt;- hab[,11:17] # Check sum(dat.1$cat_habitat_freshwater) sum(data.final$cat_habitat_freshwater) 4.2.2 Multi-category Filtering: Bio Categories data.final &lt;- data.final %&gt;% mutate(cat_bio_ecosys_species = 0) ## Filling cells #test sum(data.final$cat_bio_ecosys) for(i in 1:nrow(data.final)){ if(data.final$cat_bio_ecosys[i]==1 &amp; data.final$cat_bio_species[i]==1) { data.final$cat_bio_ecosys_species[i]=1 data.final$cat_bio_ecosys[i]=0 data.final$cat_bio_species[i]=0 } } #retest sum(data.final$cat_bio_ecosys) sum(data.final$cat_bio_ecosys_species) 4.2.3 Multi-category Filtering: Action Categories act &lt;- data.final[,c(1:17)] act &lt;- act %&gt;% mutate(sumAcross = cat_act_area + cat_act_community + cat_act_edu + cat_act_funding + cat_act_policy + cat_act_research + cat_act_restor) %&gt;% filter(sumAcross &gt; 0) # Checking number of grants/money for multiple action category grants tot_act &lt;- sum(act$Grant.Amount) # total = act5 &lt;- act %&gt;% filter(sumAcross &lt;= 5) nrow(act5)/nrow(act) sum(act5$Grant.Amount)/tot_act # Retained 99.95% of grants, 99.98% of money act4 &lt;- act %&gt;% filter(sumAcross &lt;= 4) nrow(act4)/nrow(act) sum(act4$Grant.Amount)/tot_act # Retained 99.46% of grants, 99.70% of money act3 &lt;- act %&gt;% filter(sumAcross &lt;= 3) nrow(act3)/nrow(act) sum(act3$Grant.Amount)/tot_act # Retained 97.63% of grants, 98.64% of money act2 &lt;- act %&gt;% filter(sumAcross &lt;= 2) nrow(act2)/nrow(act) sum(act2$Grant.Amount)/tot_act # Retained 90.97% of grants, 91.96% of money act1 &lt;- act %&gt;% filter(sumAcross &lt;= 1) nrow(act1)/nrow(act) sum(act1$Grant.Amount)/tot_act # Retained 67.42% of grants, 67.28% of money n_actions &lt;- 1:5 n_act_grants &lt;- c(nrow(act1), nrow(act2) - nrow(act1), nrow(act3) - nrow(act2), nrow(act4) - nrow(act3), nrow(act5) - nrow(act4)) actions &lt;- data.frame(n_actions, n_act_grants) ggplot(actions, aes(x = n_actions, y = n_act_grants)) + geom_line() + labs(title = &quot;# Grants in Multiple Action Categories&quot;) ## &gt;2 category grants into (act_other) act_other &lt;- data.final %&gt;% mutate(sum_act = cat_act_area + cat_act_community + cat_act_edu + cat_act_funding + cat_act_policy + cat_act_research + cat_act_restor) %&gt;% filter(sum_act &gt;2) ## Adding 2-action categories and other data.final &lt;- data.final %&gt;% mutate(cat_act_area_comm = 0, cat_act_area_edu = 0, cat_act_area_funding = 0, cat_act_area_policy = 0, cat_act_area_research = 0, cat_act_area_restor = 0, cat_act_community_edu = 0, cat_act_community_funding = 0, cat_act_community_policy = 0, cat_act_community_research = 0, cat_act_community_restor = 0, cat_act_edu_funding = 0, cat_act_edu_policy = 0, cat_act_edu_research = 0, cat_act_edu_restor = 0, cat_act_funding_policy = 0, cat_act_funding_research = 0, cat_act_funding_restor = 0, cat_act_policy_research = 0, cat_act_policy_restor = 0, cat_act_research_restor = 0, cat_act_other = 0) #### Filling Multiple Action cells #### ## Other Actions (&gt;2 classifications) #test sum(data.final$cat_act_research) for(i in 1:nrow(data.final)) { if(sum(data.final[i,11:17]) &gt; 2) { data.final$cat_act_other[i] = 1 data.final[i,11:17] = 0 } } #retest sum(data.final$cat_act_research) sum(data.final$cat_act_other) # matches nrow of act_other DF ## Area + Community #test sum(data.final$cat_act_area) for(i in 1:nrow(data.final)){ if(data.final$cat_act_area[i]==1 &amp; data.final$cat_act_community[i]==1) { data.final$cat_act_area_comm[i]=1} if(data.final$cat_act_area_comm[i]==1) { data.final$cat_act_area[i]=0 data.final$cat_act_community[i]=0 } } #retest sum(data.final$cat_act_area) sum(data.final$cat_act_area_comm) ## Area + Education #test sum(data.final$cat_act_area) for(i in 1:nrow(data.final)){ if(data.final$cat_act_area[i]==1 &amp; data.final$cat_act_edu[i]==1) { data.final$cat_act_area_edu[i]=1} if(data.final$cat_act_area_edu[i]==1) { data.final$cat_act_area[i]=0 data.final$cat_act_edu[i]=0 } } #retest sum(data.final$cat_act_area) sum(data.final$cat_act_area_edu) ## Area + Funding #test sum(data.final$cat_act_area) for(i in 1:nrow(data.final)){ if(data.final$cat_act_area[i]==1 &amp; data.final$cat_act_funding[i]==1) { data.final$cat_act_area_funding[i]=1} if(data.final$cat_act_area_funding[i]==1) { data.final$cat_act_area[i]=0 data.final$cat_act_funding[i]=0 } } #retest sum(data.final$cat_act_area) sum(data.final$cat_act_area_funding) ## Area + Policy #test sum(data.final$cat_act_area) for(i in 1:nrow(data.final)){ if(data.final$cat_act_area[i]==1 &amp; data.final$cat_act_policy[i]==1) { data.final$cat_act_area_policy[i]=1} if(data.final$cat_act_area_policy[i]==1) { data.final$cat_act_area[i]=0 data.final$cat_act_policy[i]=0 } } #retest sum(data.final$cat_act_area) sum(data.final$cat_act_area_policy) ## Area + Research #test sum(data.final$cat_act_area) for(i in 1:nrow(data.final)){ if(data.final$cat_act_area[i]==1 &amp; data.final$cat_act_research[i]==1) { data.final$cat_act_area_research[i]=1} if(data.final$cat_act_area_research[i]==1) { data.final$cat_act_area[i]=0 data.final$cat_act_research[i]=0 } } #retest sum(data.final$cat_act_area) sum(data.final$cat_act_area_research) ## Area + Restoration #test sum(data.final$cat_act_area) for(i in 1:nrow(data.final)){ if(data.final$cat_act_area[i]==1 &amp; data.final$cat_act_restor[i]==1) { data.final$cat_act_area_restor[i]=1} if(data.final$cat_act_area_restor[i]==1) { data.final$cat_act_area[i]=0 data.final$cat_act_restor[i]=0 } } #retest sum(data.final$cat_act_area) sum(data.final$cat_act_area_restor) ## Community + Education #test sum(data.final$cat_act_community) for(i in 1:nrow(data.final)){ if(data.final$cat_act_community[i]==1 &amp; data.final$cat_act_edu[i]==1) { data.final$cat_act_community_edu[i]=1} if(data.final$cat_act_community_edu[i]==1) { data.final$cat_act_community[i]=0 data.final$cat_act_edu[i]=0 } } #retest sum(data.final$cat_act_community) sum(data.final$cat_act_community_edu) ## Community + Funding #test sum(data.final$cat_act_community) for(i in 1:nrow(data.final)){ if(data.final$cat_act_community[i]==1 &amp; data.final$cat_act_funding[i]==1) { data.final$cat_act_community_funding[i]=1} if(data.final$cat_act_community_funding[i]==1) { data.final$cat_act_community[i]=0 data.final$cat_act_funding[i]=0 } } #retest sum(data.final$cat_act_community) sum(data.final$cat_act_community_funding) ## Community + Policy #test sum(data.final$cat_act_community) for(i in 1:nrow(data.final)){ if(data.final$cat_act_community[i]==1 &amp; data.final$cat_act_policy[i]==1) { data.final$cat_act_community_policy[i]=1} if(data.final$cat_act_community_policy[i]==1) { data.final$cat_act_community[i]=0 data.final$cat_act_policy[i]=0 } } #retest sum(data.final$cat_act_community) sum(data.final$cat_act_community_policy) ## Community + Research #test sum(data.final$cat_act_community) for(i in 1:nrow(data.final)){ if(data.final$cat_act_community[i]==1 &amp; data.final$cat_act_research[i]==1) { data.final$cat_act_community_research[i]=1} if(data.final$cat_act_community_research[i]==1) { data.final$cat_act_community[i]=0 data.final$cat_act_research[i]=0 } } #retest sum(data.final$cat_act_community) sum(data.final$cat_act_community_research) ## Community + Restoration #test sum(data.final$cat_act_community) for(i in 1:nrow(data.final)){ if(data.final$cat_act_community[i]==1 &amp; data.final$cat_act_restor[i]==1) { data.final$cat_act_community_restor[i]=1} if(data.final$cat_act_community_restor[i]==1) { data.final$cat_act_community[i]=0 data.final$cat_act_restor[i]=0 } } #retest sum(data.final$cat_act_community) sum(data.final$cat_act_community_restor) ## Education + Funding #test sum(data.final$cat_act_edu) for(i in 1:nrow(data.final)){ if(data.final$cat_act_edu[i]==1 &amp; data.final$cat_act_funding[i]==1) { data.final$cat_act_edu_funding[i]=1} if(data.final$cat_act_edu_funding[i]==1) { data.final$cat_act_edu[i]=0 data.final$cat_act_funding[i]=0 } } #retest sum(data.final$cat_act_edu) sum(data.final$cat_act_edu_funding) ## Education + Policy #test sum(data.final$cat_act_edu) for(i in 1:nrow(data.final)){ if(data.final$cat_act_edu[i]==1 &amp; data.final$cat_act_policy[i]==1) { data.final$cat_act_edu_policy[i]=1} if(data.final$cat_act_edu_policy[i]==1) { data.final$cat_act_edu[i]=0 data.final$cat_act_policy[i]=0 } } #retest sum(data.final$cat_act_edu) sum(data.final$cat_act_edu_policy) ## Education + Research #test sum(data.final$cat_act_edu) for(i in 1:nrow(data.final)){ if(data.final$cat_act_edu[i]==1 &amp; data.final$cat_act_research[i]==1) { data.final$cat_act_edu_research[i]=1} if(data.final$cat_act_edu_research[i]==1) { data.final$cat_act_edu[i]=0 data.final$cat_act_research[i]=0 } } #retest sum(data.final$cat_act_edu) sum(data.final$cat_act_edu_research) ## Education + Restoration #test sum(data.final$cat_act_edu) for(i in 1:nrow(data.final)){ if(data.final$cat_act_edu[i]==1 &amp; data.final$cat_act_restor[i]==1) { data.final$cat_act_edu_restor[i]=1} if(data.final$cat_act_edu_restor[i]==1) { data.final$cat_act_edu[i]=0 data.final$cat_act_restor[i]=0 } } #retest sum(data.final$cat_act_edu) sum(data.final$cat_act_edu_restor) ## Funding + Policy #test sum(data.final$cat_act_funding) for(i in 1:nrow(data.final)){ if(data.final$cat_act_funding[i]==1 &amp; data.final$cat_act_policy[i]==1) { data.final$cat_act_funding_policy[i]=1} if(data.final$cat_act_funding_policy[i]==1) { data.final$cat_act_funding[i]=0 data.final$cat_act_policy[i]=0 } } #retest sum(data.final$cat_act_funding) sum(data.final$cat_act_funding_policy) ## Funding + Research #test sum(data.final$cat_act_funding) for(i in 1:nrow(data.final)){ if(data.final$cat_act_funding[i]==1 &amp; data.final$cat_act_research[i]==1) { data.final$cat_act_funding_research[i]=1} if(data.final$cat_act_funding_research[i]==1) { data.final$cat_act_funding[i]=0 data.final$cat_act_research[i]=0 } } #retest sum(data.final$cat_act_funding) sum(data.final$cat_act_funding_research) ## Funding + Restoration #test sum(data.final$cat_act_funding) for(i in 1:nrow(data.final)){ if(data.final$cat_act_funding[i]==1 &amp; data.final$cat_act_restor[i]==1) { data.final$cat_act_funding_restor[i]=1} if(data.final$cat_act_funding_restor[i]==1) { data.final$cat_act_funding[i]=0 data.final$cat_act_restor[i]=0 } } #retest sum(data.final$cat_act_funding) sum(data.final$cat_act_funding_restor) ## Policy + Research #test sum(data.final$cat_act_policy) for(i in 1:nrow(data.final)){ if(data.final$cat_act_policy[i]==1 &amp; data.final$cat_act_research[i]==1) { data.final$cat_act_policy_research[i]=1} if(data.final$cat_act_policy_research[i]==1) { data.final$cat_act_policy[i]=0 data.final$cat_act_research[i]=0 } } #retest sum(data.final$cat_act_policy) sum(data.final$cat_act_policy_research) ## Policy + Restoration #test sum(data.final$cat_act_policy) for(i in 1:nrow(data.final)){ if(data.final$cat_act_policy[i]==1 &amp; data.final$cat_act_restor[i]==1) { data.final$cat_act_policy_restor[i]=1} if(data.final$cat_act_policy_restor[i]==1) { data.final$cat_act_policy[i]=0 data.final$cat_act_restor[i]=0 } } #retest sum(data.final$cat_act_policy) sum(data.final$cat_act_policy_restor) ## Research + Restoration #test sum(data.final$cat_act_research) for(i in 1:nrow(data.final)){ if(data.final$cat_act_research[i]==1 &amp; data.final$cat_act_restor[i]==1) { data.final$cat_act_research_restor[i]=1} if(data.final$cat_act_research_restor[i]==1) { data.final$cat_act_research[i]=0 data.final$cat_act_restor[i]=0 } } #retest sum(data.final$cat_act_research) sum(data.final$cat_act_research_restor) 4.2.4 Multi-category Filtering: Threat Categories threat &lt;- data.final[,c(1:10, 37:42)] threat &lt;- threat %&gt;% mutate(sumAcross = cat_threat_climate + cat_threat_energytransport + cat_threat_habitat + cat_threat_inv_spec + cat_threat_overexp + cat_threat_pollution) %&gt;% filter(sumAcross &gt; 0) # Checking number of grants/money for multiple threation category grants tot_threat &lt;- sum(threat$Grant.Amount) # total = threat4 &lt;- threat %&gt;% filter(sumAcross &lt;= 4) nrow(threat4)/nrow(threat) sum(threat4$Grant.Amount)/tot_threat # Retained all grants threat3 &lt;- threat %&gt;% filter(sumAcross &lt;= 3) nrow(threat3)/nrow(threat) sum(threat3$Grant.Amount)/tot_threat # Retained 99.75% of grants, 99.21% of money threat2 &lt;- threat %&gt;% filter(sumAcross &lt;= 2) nrow(threat2)/nrow(threat) sum(threat2$Grant.Amount)/tot_threat # Retained 96.95% of grants, 95.39% of money threat1 &lt;- threat %&gt;% filter(sumAcross &lt;= 1) nrow(threat1)/nrow(threat) sum(threat1$Grant.Amount)/tot_threat # Retained 77.55% of grants, 72.19% of money n_threats &lt;- 1:4 n_threat_grants &lt;- c(nrow(threat1), nrow(threat2) - nrow(threat1), nrow(threat3) - nrow(threat2), nrow(threat4) - nrow(threat3)) threats &lt;- data.frame(n_threats, n_threat_grants) ggplot(threats, aes(x = n_threats, y = n_threat_grants)) + geom_line() + labs(title = &quot;# Grants in Multiple Threat Categories&quot;) #### &gt;2 category grants (threat_other) threat_other &lt;- data.final %&gt;% mutate(sum_threat = cat_threat_climate + cat_threat_energytransport + cat_threat_habitat + cat_threat_inv_spec + cat_threat_overexp + cat_threat_pollution) %&gt;% filter(sum_threat &gt;2) #### Adding 2-threat categories data.final &lt;- data.final %&gt;% mutate(cat_threat_climate_energytransport = 0, cat_threat_climate_habitat = 0, cat_threat_climate_inv_spec = 0, cat_threat_climate_overexp = 0, cat_threat_climate_pollution = 0, cat_threat_energytransport_habitat = 0, cat_threat_energytransport_inv_spec = 0, cat_threat_energytransport_overexp = 0, cat_threat_energytransport_pollution = 0, cat_threat_habitat_inv_spec = 0, cat_threat_habitat_overexp = 0, cat_threat_habitat_pollution = 0, cat_threat_inv_spec_overexp = 0, cat_threat_inv_spec_pollution = 0, cat_threat_overexp_pollution = 0, cat_threat_other = 0) #### Filling Mulitple Threat cells #### ## Other Threats (&gt;2 Categories) #test sum(data.final$cat_threat_overexp) for(i in 1:nrow(data.final)){ if(sum(data.final[i,37:42]) &gt; 2) { data.final$cat_threat_other[i] = 1 data.final[i, 37:42] = 0 } } #retest sum(data.final$cat_threat_overexp) sum(data.final$cat_threat_other) # matches nrow of threats_other DF ## Climate + Energy/Transportation #test sum(data.final$cat_threat_climate) for(i in 1:nrow(data.final)){ if(data.final$cat_threat_climate[i]==1 &amp; data.final$cat_threat_energytransport[i]==1) { data.final$cat_threat_climate_energytransport[i]=1} if(data.final$cat_threat_climate_energytransport[i]==1) { data.final$cat_threat_climate[i]=0 data.final$cat_threat_energytransport[i]=0 } } #retest sum(data.final$cat_threat_climate) sum(data.final$cat_threat_climate_energytransport) ## Climate + Habitat #test sum(data.final$cat_threat_climate) for(i in 1:nrow(data.final)){ if(data.final$cat_threat_climate[i]==1 &amp; data.final$cat_threat_habitat[i]==1) { data.final$cat_threat_climate_habitat[i]=1} if(data.final$cat_threat_climate_habitat[i]==1) { data.final$cat_threat_climate[i]=0 data.final$cat_threat_habitat[i]=0 } } #retest sum(data.final$cat_threat_climate) sum(data.final$cat_threat_climate_habitat) ## Climate + Invasive Species #test sum(data.final$cat_threat_climate) for(i in 1:nrow(data.final)){ if(data.final$cat_threat_climate[i]==1 &amp; data.final$cat_threat_inv_spec[i]==1) { data.final$cat_threat_climate_inv_spec[i]=1} if(data.final$cat_threat_climate_inv_spec[i]==1) { data.final$cat_threat_climate[i]=0 data.final$cat_threat_inv_spec[i]=0 } } #retest sum(data.final$cat_threat_climate) sum(data.final$cat_threat_climate_inv_spec) ## Climate + Overexploitation #test sum(data.final$cat_threat_climate) for(i in 1:nrow(data.final)){ if(data.final$cat_threat_climate[i]==1 &amp; data.final$cat_threat_overexp[i]==1) { data.final$cat_threat_climate_overexp[i]=1} if(data.final$cat_threat_climate_overexp[i]==1) { data.final$cat_threat_climate[i]=0 data.final$cat_threat_overexp[i]=0 } } #retest sum(data.final$cat_threat_climate) sum(data.final$cat_threat_climate_overexp) ## Climate + Pollution #test sum(data.final$cat_threat_climate) for(i in 1:nrow(data.final)){ if(data.final$cat_threat_climate[i]==1 &amp; data.final$cat_threat_pollution[i]==1) { data.final$cat_threat_climate_pollution[i]=1} if(data.final$cat_threat_climate_pollution[i]==1) { data.final$cat_threat_climate[i]=0 data.final$cat_threat_pollution[i]=0 } } #retest sum(data.final$cat_threat_climate) sum(data.final$cat_threat_climate_pollution) ## Energy/Transportation + Habitat #test sum(data.final$cat_threat_energytransport) for(i in 1:nrow(data.final)){ if(data.final$cat_threat_energytransport[i]==1 &amp; data.final$cat_threat_habitat[i]==1) { data.final$cat_threat_energytransport_habitat[i]=1} if(data.final$cat_threat_energytransport_habitat[i]==1) { data.final$cat_threat_energytransport[i]=0 data.final$cat_threat_habitat[i]=0 } } #retest sum(data.final$cat_threat_energytransport) sum(data.final$cat_threat_energytransport_habitat) ## Energy/Transportation + Invasive Species #test sum(data.final$cat_threat_energytransport) for(i in 1:nrow(data.final)){ if(data.final$cat_threat_energytransport[i]==1 &amp; data.final$cat_threat_inv_spec[i]==1) { data.final$cat_threat_energytransport_inv_spec[i]=1} if(data.final$cat_threat_energytransport_inv_spec[i]==1) { data.final$cat_threat_energytransport[i]=0 data.final$cat_threat_inv_spec[i]=0 } } #retest sum(data.final$cat_threat_energytransport) sum(data.final$cat_threat_energytransport_inv_spec) ## Energy/Transportation + Overexploitation #test sum(data.final$cat_threat_energytransport) for(i in 1:nrow(data.final)){ if(data.final$cat_threat_energytransport[i]==1 &amp; data.final$cat_threat_overexp[i]==1) { data.final$cat_threat_energytransport_overexp[i]=1} if(data.final$cat_threat_energytransport_overexp[i]==1) { data.final$cat_threat_energytransport[i]=0 data.final$cat_threat_overexp[i]=0 } } #retest sum(data.final$cat_threat_energytransport) sum(data.final$cat_threat_energytransport_overexp) ## Energy/Transportation + Pollution #test sum(data.final$cat_threat_energytransport) for(i in 1:nrow(data.final)){ if(data.final$cat_threat_energytransport[i]==1 &amp; data.final$cat_threat_pollution[i]==1) { data.final$cat_threat_energytransport_pollution[i]=1} if(data.final$cat_threat_energytransport_pollution[i]==1) { data.final$cat_threat_energytransport[i]=0 data.final$cat_threat_pollution[i]=0 } } #retest sum(data.final$cat_threat_energytransport) sum(data.final$cat_threat_energytransport_pollution) ## Habitat + Invasive Species #test sum(data.final$cat_threat_habitat) for(i in 1:nrow(data.final)){ if(data.final$cat_threat_habitat[i]==1 &amp; data.final$cat_threat_inv_spec[i]==1) { data.final$cat_threat_habitat_inv_spec[i]=1} if(data.final$cat_threat_habitat_inv_spec[i]==1) { data.final$cat_threat_habitat[i]=0 data.final$cat_threat_inv_spec[i]=0 } } #retest sum(data.final$cat_threat_habitat) sum(data.final$cat_threat_habitat_inv_spec) ## Habitat + Overexploitation #test sum(data.final$cat_threat_habitat) for(i in 1:nrow(data.final)){ if(data.final$cat_threat_habitat[i]==1 &amp; data.final$cat_threat_overexp[i]==1) { data.final$cat_threat_habitat_overexp[i]=1} if(data.final$cat_threat_habitat_overexp[i]==1) { data.final$cat_threat_habitat[i]=0 data.final$cat_threat_overexp[i]=0 } } #retest sum(data.final$cat_threat_habitat) sum(data.final$cat_threat_habitat_overexp) ## Habitat + Pollution #test sum(data.final$cat_threat_habitat) for(i in 1:nrow(data.final)){ if(data.final$cat_threat_habitat[i]==1 &amp; data.final$cat_threat_pollution[i]==1) { data.final$cat_threat_habitat_pollution[i]=1} if(data.final$cat_threat_habitat_pollution[i]==1) { data.final$cat_threat_habitat[i]=0 data.final$cat_threat_pollution[i]=0 } } #retest sum(data.final$cat_threat_habitat) sum(data.final$cat_threat_habitat_pollution) ## Invasive Species + Overexploitation #test sum(data.final$cat_threat_inv_spec) for(i in 1:nrow(data.final)){ if(data.final$cat_threat_inv_spec[i]==1 &amp; data.final$cat_threat_overexp[i]==1) { data.final$cat_threat_inv_spec_overexp[i]=1} if(data.final$cat_threat_inv_spec_overexp[i]==1) { data.final$cat_threat_inv_spec[i]=0 data.final$cat_threat_overexp[i]=0 } } #retest sum(data.final$cat_threat_inv_spec) sum(data.final$cat_threat_inv_spec_overexp) ## Invasive Species + Pollution #test sum(data.final$cat_threat_inv_spec) for(i in 1:nrow(data.final)){ if(data.final$cat_threat_inv_spec[i]==1 &amp; data.final$cat_threat_pollution[i]==1) { data.final$cat_threat_inv_spec_pollution[i]=1} if(data.final$cat_threat_inv_spec_pollution[i]==1) { data.final$cat_threat_inv_spec[i]=0 data.final$cat_threat_pollution[i]=0 } } #retest sum(data.final$cat_threat_inv_spec) sum(data.final$cat_threat_inv_spec_pollution) ## Overexploitation + Pollution #test sum(data.final$cat_threat_overexp) for(i in 1:nrow(data.final)){ if(data.final$cat_threat_overexp[i]==1 &amp; data.final$cat_threat_pollution[i]==1) { data.final$cat_threat_overexp_pollution[i]=1} if(data.final$cat_threat_overexp_pollution[i]==1) { data.final$cat_threat_overexp[i]=0 data.final$cat_threat_pollution[i]=0 } } #retest sum(data.final$cat_threat_overexp) sum(data.final$cat_threat_overexp_pollution) 4.2.5 Multi-category Filtering: Taxa Category taxa &lt;- data.final[,c(1:10, 30:36)] taxa_other &lt;- data.final %&gt;% mutate(sum_taxa = rowSums(.[30:36])) %&gt;% filter(sum_taxa &gt; 2) ## Adding 2-taxa categories and other data.final &lt;- data.final %&gt;% mutate(cat_taxa_amphibian_bird = 0, cat_taxa_amphibian_fish = 0, cat_taxa_amphibian_invertebrate = 0, cat_taxa_amphibian_mammal = 0, cat_taxa_amphibian_plant = 0, cat_taxa_amphibian_reptile = 0, cat_taxa_bird_fish = 0, cat_taxa_bird_invertebrate = 0, cat_taxa_bird_mammal = 0, cat_taxa_bird_plant = 0, cat_taxa_bird_reptile = 0, cat_taxa_fish_invertebrate = 0, cat_taxa_fish_mammal = 0, cat_taxa_fish_plant = 0, cat_taxa_fish_reptile = 0, cat_taxa_invertebrate_mammal = 0, cat_taxa_invertebrate_plant = 0, cat_taxa_invertebrate_reptile = 0, cat_taxa_mammal_plant = 0, cat_taxa_mammal_reptile = 0, cat_taxa_plant_reptile = 0, cat_taxa_other = 0) #### Filling Multiple Taxa cells #### ## Other Taxa (&gt;2 classifications) #test sum(data.final$cat_taxa_plant) for(i in 1:nrow(data.final)) { if(sum(data.final[i,30:36]) &gt; 2) { data.final$cat_taxa_other[i] = 1 data.final[i,30:36] = 0 } } #retest sum(data.final$cat_taxa_plant) sum(data.final$cat_taxa_other) # matches nrow of taxa_other DF ## amphibian + bird #test sum(data.final$cat_taxa_amphibian) for(i in 1:nrow(data.final)){ if(data.final$cat_taxa_amphibian[i]==1 &amp; data.final$cat_taxa_bird[i]==1) { data.final$cat_taxa_amphibian_bird[i]=1} if(data.final$cat_taxa_amphibian_bird[i]==1) { data.final$cat_taxa_amphibian[i]=0 data.final$cat_taxa_bird[i]=0 } } #retest sum(data.final$cat_taxa_amphibian) sum(data.final$cat_taxa_amphibian_bird) ## amphibian + fish #test sum(data.final$cat_taxa_amphibian) for(i in 1:nrow(data.final)){ if(data.final$cat_taxa_amphibian[i]==1 &amp; data.final$cat_taxa_fish[i]==1) { data.final$cat_taxa_amphibian_fish[i]=1} if(data.final$cat_taxa_amphibian_fish[i]==1) { data.final$cat_taxa_amphibian[i]=0 data.final$cat_taxa_fish[i]=0 } } #retest sum(data.final$cat_taxa_amphibian) sum(data.final$cat_taxa_amphibian_fish) ## amphibian + invertebrate #test sum(data.final$cat_taxa_amphibian) for(i in 1:nrow(data.final)){ if(data.final$cat_taxa_amphibian[i]==1 &amp; data.final$cat_taxa_invertebrate[i]==1) { data.final$cat_taxa_amphibian_invertebrate[i]=1} if(data.final$cat_taxa_amphibian_invertebrate[i]==1) { data.final$cat_taxa_amphibian[i]=0 data.final$cat_taxa_invertebrate[i]=0 } } #retest sum(data.final$cat_taxa_amphibian) sum(data.final$cat_taxa_amphibian_invertebrate) ## amphibian + mammal #test sum(data.final$cat_taxa_amphibian) for(i in 1:nrow(data.final)){ if(data.final$cat_taxa_amphibian[i]==1 &amp; data.final$cat_taxa_mammal[i]==1) { data.final$cat_taxa_amphibian_mammal[i]=1} if(data.final$cat_taxa_amphibian_mammal[i]==1) { data.final$cat_taxa_amphibian[i]=0 data.final$cat_taxa_mammal[i]=0 } } #retest sum(data.final$cat_taxa_amphibian) sum(data.final$cat_taxa_amphibian_mammal) ## amphibian + plant #test sum(data.final$cat_taxa_amphibian) for(i in 1:nrow(data.final)){ if(data.final$cat_taxa_amphibian[i]==1 &amp; data.final$cat_taxa_plant[i]==1) { data.final$cat_taxa_amphibian_plant[i]=1} if(data.final$cat_taxa_amphibian_plant[i]==1) { data.final$cat_taxa_amphibian[i]=0 data.final$cat_taxa_plant[i]=0 } } #retest sum(data.final$cat_taxa_amphibian) sum(data.final$cat_taxa_amphibian_plant) ## amphibian + reptile #test sum(data.final$cat_taxa_amphibian) for(i in 1:nrow(data.final)){ if(data.final$cat_taxa_amphibian[i]==1 &amp; data.final$cat_taxa_reptile[i]==1) { data.final$cat_taxa_amphibian_reptile[i]=1} if(data.final$cat_taxa_amphibian_reptile[i]==1) { data.final$cat_taxa_amphibian[i]=0 data.final$cat_taxa_reptile[i]=0 } } #retest sum(data.final$cat_taxa_amphibian) sum(data.final$cat_taxa_amphibian_reptile) ## bird + fish #test sum(data.final$cat_taxa_bird) for(i in 1:nrow(data.final)){ if(data.final$cat_taxa_bird[i]==1 &amp; data.final$cat_taxa_fish[i]==1) { data.final$cat_taxa_bird_fish[i]=1} if(data.final$cat_taxa_bird_fish[i]==1) { data.final$cat_taxa_bird[i]=0 data.final$cat_taxa_fish[i]=0 } } #retest sum(data.final$cat_taxa_bird) sum(data.final$cat_taxa_bird_fish) ## bird + invertebrate #test sum(data.final$cat_taxa_bird) for(i in 1:nrow(data.final)){ if(data.final$cat_taxa_bird[i]==1 &amp; data.final$cat_taxa_invertebrate[i]==1) { data.final$cat_taxa_bird_invertebrate[i]=1} if(data.final$cat_taxa_bird_invertebrate[i]==1) { data.final$cat_taxa_bird[i]=0 data.final$cat_taxa_invertebrate[i]=0 } } #retest sum(data.final$cat_taxa_bird) sum(data.final$cat_taxa_bird_invertebrate) ## bird + mammal #test sum(data.final$cat_taxa_bird) for(i in 1:nrow(data.final)){ if(data.final$cat_taxa_bird[i]==1 &amp; data.final$cat_taxa_mammal[i]==1) { data.final$cat_taxa_bird_mammal[i]=1} if(data.final$cat_taxa_bird_mammal[i]==1) { data.final$cat_taxa_bird[i]=0 data.final$cat_taxa_mammal[i]=0 } } #retest sum(data.final$cat_taxa_bird) sum(data.final$cat_taxa_bird_mammal) ## bird + plant #test sum(data.final$cat_taxa_bird) for(i in 1:nrow(data.final)){ if(data.final$cat_taxa_bird[i]==1 &amp; data.final$cat_taxa_plant[i]==1) { data.final$cat_taxa_bird_plant[i]=1} if(data.final$cat_taxa_bird_plant[i]==1) { data.final$cat_taxa_bird[i]=0 data.final$cat_taxa_plant[i]=0 } } #retest sum(data.final$cat_taxa_bird) sum(data.final$cat_taxa_bird_plant) ## bird + reptile #test sum(data.final$cat_taxa_bird) for(i in 1:nrow(data.final)){ if(data.final$cat_taxa_bird[i]==1 &amp; data.final$cat_taxa_reptile[i]==1) { data.final$cat_taxa_bird_reptile[i]=1} if(data.final$cat_taxa_bird_reptile[i]==1) { data.final$cat_taxa_bird[i]=0 data.final$cat_taxa_reptile[i]=0 } } #retest sum(data.final$cat_taxa_bird) sum(data.final$cat_taxa_bird_reptile) ## fish + invertebrate #test sum(data.final$cat_taxa_fish) for(i in 1:nrow(data.final)){ if(data.final$cat_taxa_fish[i]==1 &amp; data.final$cat_taxa_invertebrate[i]==1) { data.final$cat_taxa_fish_invertebrate[i]=1} if(data.final$cat_taxa_fish_invertebrate[i]==1) { data.final$cat_taxa_fish[i]=0 data.final$cat_taxa_invertebrate[i]=0 } } #retest sum(data.final$cat_taxa_fish) sum(data.final$cat_taxa_fish_invertebrate) ## fish + mammal #test sum(data.final$cat_taxa_fish) for(i in 1:nrow(data.final)){ if(data.final$cat_taxa_fish[i]==1 &amp; data.final$cat_taxa_mammal[i]==1) { data.final$cat_taxa_fish_mammal[i]=1} if(data.final$cat_taxa_fish_mammal[i]==1) { data.final$cat_taxa_fish[i]=0 data.final$cat_taxa_mammal[i]=0 } } #retest sum(data.final$cat_taxa_fish) sum(data.final$cat_taxa_fish_mammal) ## fish + plant #test sum(data.final$cat_taxa_fish) for(i in 1:nrow(data.final)){ if(data.final$cat_taxa_fish[i]==1 &amp; data.final$cat_taxa_plant[i]==1) { data.final$cat_taxa_fish_plant[i]=1} if(data.final$cat_taxa_fish_plant[i]==1) { data.final$cat_taxa_fish[i]=0 data.final$cat_taxa_plant[i]=0 } } #retest sum(data.final$cat_taxa_fish) sum(data.final$cat_taxa_fish_plant) ## fish + reptile #test sum(data.final$cat_taxa_fish) for(i in 1:nrow(data.final)){ if(data.final$cat_taxa_fish[i]==1 &amp; data.final$cat_taxa_reptile[i]==1) { data.final$cat_taxa_fish_reptile[i]=1} if(data.final$cat_taxa_fish_reptile[i]==1) { data.final$cat_taxa_fish[i]=0 data.final$cat_taxa_reptile[i]=0 } } #retest sum(data.final$cat_taxa_fish) sum(data.final$cat_taxa_fish_reptile) ## invertebrate + mammal #test sum(data.final$cat_taxa_invertebrate) for(i in 1:nrow(data.final)){ if(data.final$cat_taxa_invertebrate[i]==1 &amp; data.final$cat_taxa_mammal[i]==1) { data.final$cat_taxa_invertebrate_mammal[i]=1} if(data.final$cat_taxa_invertebrate_mammal[i]==1) { data.final$cat_taxa_invertebrate[i]=0 data.final$cat_taxa_mammal[i]=0 } } #retest sum(data.final$cat_taxa_invertebrate) sum(data.final$cat_taxa_invertebrate_mammal) ## invertebrate + plant #test sum(data.final$cat_taxa_invertebrate) for(i in 1:nrow(data.final)){ if(data.final$cat_taxa_invertebrate[i]==1 &amp; data.final$cat_taxa_plant[i]==1) { data.final$cat_taxa_invertebrate_plant[i]=1} if(data.final$cat_taxa_invertebrate_plant[i]==1) { data.final$cat_taxa_invertebrate[i]=0 data.final$cat_taxa_plant[i]=0 } } #retest sum(data.final$cat_taxa_invertebrate) sum(data.final$cat_taxa_invertebrate_plant) ## invertebrate + reptile #test sum(data.final$cat_taxa_invertebrate) for(i in 1:nrow(data.final)){ if(data.final$cat_taxa_invertebrate[i]==1 &amp; data.final$cat_taxa_reptile[i]==1) { data.final$cat_taxa_invertebrate_reptile[i]=1} if(data.final$cat_taxa_invertebrate_reptile[i]==1) { data.final$cat_taxa_invertebrate[i]=0 data.final$cat_taxa_reptile[i]=0 } } #retest sum(data.final$cat_taxa_invertebrate) sum(data.final$cat_taxa_invertebrate_reptile) ## mammal + plant #test sum(data.final$cat_taxa_mammal) for(i in 1:nrow(data.final)){ if(data.final$cat_taxa_mammal[i]==1 &amp; data.final$cat_taxa_plant[i]==1) { data.final$cat_taxa_mammal_plant[i]=1} if(data.final$cat_taxa_mammal_plant[i]==1) { data.final$cat_taxa_mammal[i]=0 data.final$cat_taxa_plant[i]=0 } } #retest sum(data.final$cat_taxa_mammal) sum(data.final$cat_taxa_mammal_plant) ## mammal + reptile #test sum(data.final$cat_taxa_mammal) for(i in 1:nrow(data.final)){ if(data.final$cat_taxa_mammal[i]==1 &amp; data.final$cat_taxa_reptile[i]==1) { data.final$cat_taxa_mammal_reptile[i]=1} if(data.final$cat_taxa_mammal_reptile[i]==1) { data.final$cat_taxa_mammal[i]=0 data.final$cat_taxa_reptile[i]=0 } } #retest sum(data.final$cat_taxa_mammal) sum(data.final$cat_taxa_mammal_reptile) ## plant + reptile #test sum(data.final$cat_taxa_plant) for(i in 1:nrow(data.final)){ if(data.final$cat_taxa_plant[i]==1 &amp; data.final$cat_taxa_reptile[i]==1) { data.final$cat_taxa_plant_reptile[i]=1} if(data.final$cat_taxa_plant_reptile[i]==1) { data.final$cat_taxa_plant[i]=0 data.final$cat_taxa_reptile[i]=0 } } #retest sum(data.final$cat_taxa_plant) sum(data.final$cat_taxa_plant_reptile) 4.2.6 Export Multi-Category Data for Analysis and Visualization write_csv(data.final, &quot;~/Desktop/master_output_data_analysis_v15_filtered.csv&quot;) 4.3 Preparing a final datafame for analysis of threats, taxonomic groups and proportion of funding import pandas as pd import numpy as np import math import tqdm from sklearn.preprocessing import MultiLabelBinarizer mlb = MultiLabelBinarizer() data = pd.read_csv(&#39;~data/all-grants.csv&#39;) preproc_ph = pd.read_csv(&#39;~data/list-of-preprocessing-phrases.csv&#39;) preproc_phrases = list(preproc_ph.Phrases) data = data.drop([ele for ele in data.columns.to_list() if ele in [&#39;X&#39;, &#39;Random Sort&#39;, &#39;Unnamed: 0&#39;]], axis=1) data = data.dropna(subset=[&#39;Description&#39;]) for phrase in preproc_phrases[:6]: data = data[~data.Description.str.contains(phrase)] for phrase in preproc_phrases[6:]: data = data[data.Description.str.lower() != phrase] data = data.reset_index(drop=True) data_class = pd.read_csv(&#39;~data/output-grants-filtered.csv&#39;) data_class = data_class.fillna(&#39;-&#39;) pbar = tqdm.tqdm(total=len(data)) for idx in range(len(data)): for col in data_class.columns[1:]: if type(data_class[col][idx]) == str: data_class[col][idx] = list(set(data_class[col][idx].split(&#39;|&#39;))) pbar.update(1) pbar.close() df_final = pd.concat([data, data_class[[&#39;Keywords&#39;, &#39;Filtered_Categories&#39;, &#39;Bio_keywords&#39;]]], axis=1) df_final = df_final.join(pd.DataFrame(mlb.fit_transform(df_final.pop(&#39;Filtered_Categories&#39;)),columns=[&#39;cat_&#39; + x for x in mlb.classes_],index=df_final.index)) df_final = df_final.join(pd.DataFrame(mlb.fit_transform(df_final.pop(&#39;Bio_keywords&#39;)),columns=[&#39;bio_key_&#39; + x for x in mlb.classes_],index=df_final.index)) df_final = df_final.drop([&#39;cat_-&#39;, &#39;bio_key_-&#39;], axis=1) df_final.to_csv(&#39;~data/output-grants-for-analysis.csv&#39;, index=False) "],
["data-analysis-and-visualization-datavis.html", "Section 5 Data Analysis and Visualization {dataVis} 5.1 Exploratory Visuals 5.2 Manuscript Figures", " Section 5 Data Analysis and Visualization {dataVis} 5.1 Exploratory Visuals 5.1.1 Grants with No Keywords This is a plot featuring the 50 largest grants that have no keywords associated with them. no_keywords &lt;- data %&gt;% filter(Keywords ==&quot;[&#39;-&#39;]&quot;) %&gt;% arrange(desc(Grant.Amount)) no_keywords_plot &lt;- ggplot(no_keywords[1:50,], aes(x = factor(row.names(no_keywords[1:50,]), levels = 1:50), y = Grant.Amount)) + geom_col() + theme_minimal() + labs(title = &quot;No Keyword Biggest Grants (50)&quot;, x = &quot;Rank&quot;, y = &quot;Money ($US)&quot;) + scale_y_continuous(labels = scales::comma) no_keywords_plot 5.1.2 All Grants with Funding Here we lengthen the data to more properly examine and visualize where the money from each grant is being allocated. data &lt;- filter(data, Keywords != &quot;[&#39;-&#39;]&quot;) %&gt;% filter(Year.Authorized &lt; 2017) %&gt;% filter(Year.Authorized != 2002) data.multi &lt;- filter(data.multi, Keywords != &quot;[&#39;-&#39;]&quot;) %&gt;% filter(Year.Authorized &lt; 2017) %&gt;% filter(Year.Authorized != 2002) money.data &lt;- data[,11:(length(data)-6)]*data[,7] money.data &lt;- mutate(money.data, Year.Authorized = data$Year.Authorized) by.year.money &lt;- money.data %&gt;% group_by(Year.Authorized) %&gt;% summarize_at(vars(cat_act_area:cat_taxa_other), sum, na.rm = TRUE) %&gt;% pivot_longer(-Year.Authorized, names_to = &quot;Category&quot;, values_to = &quot;Amount&quot;) %&gt;% group_by(Category) %&gt;% mutate(percent = Amount/sum(Amount)) 5.1.3 Bio Subset Here we remove those climate/energy grants that do not contain biodiversity conservation keywords. # Single Category Data data_bio.1 &lt;- data %&gt;% filter_at(vars(biodiv.bio.taxa.hab_cat), any_vars(.&gt; 0)) data_non.bio.1 &lt;- data %&gt;% filter_at(vars(biodiv.bio.taxa.hab_cat), all_vars(. == 0)) data_bio.2 &lt;- data_non.bio.1 %&gt;% filter_at(vars(clim.energy_cat), all_vars(.==0)) data_non.bio.2 &lt;- data_non.bio.1 %&gt;% filter_at(vars(clim.energy_cat), any_vars(.&gt;0)) data_bio &lt;- bind_rows(data_bio.1, data_bio.2) data_non.bio &lt;- data_non.bio.2 # Multi-category Data data.multi_bio.1 &lt;- data.multi %&gt;% filter_at(vars(biodiv.bio.taxa.hab_cat_multi), any_vars(.&gt; 0)) data.multi_non.bio.1 &lt;- data.multi %&gt;% filter_at(vars(biodiv.bio.taxa.hab_cat_multi), all_vars(. == 0)) data.multi_bio.2 &lt;- data.multi_non.bio.1 %&gt;% filter_at(vars(cat_threat_climate, cat_threat_energytransport), all_vars(.==0)) data.multi_non.bio.2 &lt;- data.multi_non.bio.1 %&gt;% filter_at(vars(cat_threat_climate, cat_threat_energytransport), any_vars(.&gt;0)) data.multi_bio &lt;- bind_rows(data.multi_bio.1, data.multi_bio.2) data.multi_non.bio &lt;- data.multi_non.bio.2 5.1.4 Money Data Here we further subset the lengthened dataset featuring all grants that have associated funding and break them down at an annual resolution Those subsets include the amount of money allocated to each category per year, the amount of non-biodiversity funding by year, and the amount of money across multi-category grants per year. # Single Category Data money.data_bio &lt;- data_bio[,11:(length(data_bio)-6)]*data_bio[,7] money.data_bio &lt;- mutate(money.data_bio, Year.Authorized = data_bio$Year.Authorized, Num.Thr = data_bio$Num.Thr) by.year.money_bio &lt;- money.data_bio %&gt;% group_by(Year.Authorized) %&gt;% summarize_at(vars(cat_act_area:cat_taxa_other), sum, na.rm = TRUE) %&gt;% pivot_longer(-Year.Authorized, names_to = &quot;Category&quot;, values_to = &quot;Amount&quot;) %&gt;% group_by(Year.Authorized) %&gt;% mutate(ann.percent = Amount/sum(Amount)) %&gt;% group_by(Category) %&gt;% mutate(percent = Amount/sum(Amount)) money.data_non.bio &lt;- data_non.bio[,11:(length(data_non.bio)-6)]*data_non.bio[,7] money.data_non.bio &lt;- mutate(money.data_non.bio, Year.Authorized = data_non.bio$Year.Authorized, Num.Thr = data_non.bio$Num.Thr) by.year.money_non.bio &lt;- money.data_non.bio %&gt;% group_by(Year.Authorized) %&gt;% summarize_at(vars(cat_act_area:cat_threat_overexp_pollution), sum, na.rm = TRUE) %&gt;% pivot_longer(-Year.Authorized, names_to = &quot;Category&quot;, values_to = &quot;Amount&quot;) %&gt;% group_by(Category) %&gt;% mutate(percent = Amount/sum(Amount)) # Multi-category Data money.data.multi_bio &lt;- data.multi_bio[,11:(length(data.multi_bio)-6)]*data.multi_bio[,7] money.data.multi_bio &lt;- mutate(money.data.multi_bio, Year.Authorized = data.multi_bio$Year.Authorized, Num.Thr = data.multi_bio$Num.Thr) by.year.money.multi_bio &lt;- money.data.multi_bio %&gt;% group_by(Year.Authorized) %&gt;% summarize_at(vars(cat_act_area:cat_threat_pollution), sum, na.rm = TRUE) %&gt;% pivot_longer(-Year.Authorized, names_to = &quot;Category&quot;, values_to = &quot;Amount&quot;) %&gt;% group_by(Category) %&gt;% mutate(percent = Amount/sum(Amount)) 5.2 Manuscript Figures 5.2.1 Figure 1: Proportion of Money vs. Species Threatened INSERT FIGURE CAPTION FROM MANUSCRIPT fig.1.money_bio &lt;- by.year.money_bio %&gt;% filter(Category %in% u.threat_cat) %&gt;% group_by(Category) %&gt;% summarise(Total = sum(Amount)) fig.1.species &lt;- maxwell %&gt;% dplyr::select(Category, n_species_threatened) %&gt;% group_by(Category) %&gt;% summarise(Total = sum(n_species_threatened)) rawFrame &lt;- left_join(fig.1.money_bio, fig.1.species, by = &quot;Category&quot;) %&gt;% mutate(rawMoney = Total.x) %&gt;% # Total Money mutate(rawSpecies = Total.y) %&gt;% # Total Species dplyr::select(Category, rawMoney, rawSpecies) fig.1.data_bio &lt;- left_join(fig.1.money_bio, fig.1.species, by = &quot;Category&quot;) %&gt;% mutate(Money = (Total.x/sum(Total.x))*100) %&gt;% # Percentage of Total Money mutate(Species = (Total.y/sum(Total.y))*100) %&gt;% # Percentage of Total Species dplyr::select(Category, Money, Species) %&gt;% pivot_longer(c(Money, Species), names_to = &quot;is.Money&quot;, values_to = &quot;Amount&quot;) %&gt;% left_join(rawFrame, by = &quot;Category&quot;) %&gt;% mutate(rawMoney = ifelse(is.Money == &quot;Species&quot;, NA, rawMoney)) %&gt;% mutate(rawSpecies= ifelse(is.Money == &quot;Money&quot;, NA, rawSpecies)) %&gt;% replace_na(list(rawMoney = &quot;&quot;, rawSpecies = &quot;&quot;)) %&gt;% unite(&quot;rawValue&quot;, rawMoney:rawSpecies, sep = &quot;&quot;, remove = FALSE) %&gt;% mutate(rawValue = as.numeric(rawValue), rawLabels = comma(rawValue)) fig.1.data_bio$rawLabels[c(seq(1,11,2))] &lt;- str_glue(&quot;${round(rawFrame$rawMoney/1e6)}m&quot;) # fig.1.data_bio$rawLabels[c(seq(2,12,2))] &lt;- rawFrame$rawSpecies fig.1.plot_bio &lt;- ggplot(fig.1.data_bio, aes(fill=is.Money, y=Amount, x=Category)) + geom_col(position=&quot;dodge&quot;) + labs(x=&quot;Threat Category&quot;, y=&quot;Percentage&quot;) + # title=&quot;% Money Allocated vs. % Species Threatened (IUCN) by Unique Threats&quot;) + scale_x_discrete(labels=u.threat_list) + scale_fill_manual(# values = c(&quot;#556B2F&quot;, &quot;#8f3c36&quot;), values = alpha(c(&quot;darkgreen&quot;, &quot;orangered4&quot;), 0.9), # values = c(&quot;#556B2F&quot;, &quot;#708090&quot;), labels = c(&quot;Money ($USD Million)&quot;, &quot;# Threatened Species&quot;)) + geom_text(position = position_dodge(width= 1), aes(label = rawLabels, hjust = 0.5, vjust = -0.5), angle=0, size=6) + ylim(0, 50) + theme_minimal() + theme(axis.title = element_text(size = 16, face = &quot;bold&quot;), axis.ticks.length.x = unit(.5, &quot;cm&quot;), axis.text = element_text(size = 14), legend.title = element_blank(), legend.key.size = unit(1,&quot;cm&quot;), legend.text = element_text(size = 12)) # ggsave(fig.1.plot_bio, filename = &quot;~/Columbia E3B/Conservation Group/Output V15.2/Figures/money_species_comparison.png&quot;, width=15, height=7,dpi = 300) fig.1.plot_bio 5.2.2 Figure 2: Amount of Money Allocated Across Unique Threat Categories per Year INSERT FIGURE CAPTION FROM MANUSCRIPT threat_temporal.data &lt;- by.year.money_bio %&gt;% filter(Category %in% u.threat_cat) threat_temporal.plot &lt;- ggplot(threat_temporal.data, aes(y = Amount, x = Year.Authorized, color = Category)) + #geom_point() + geom_line(size = 2, linetype = 1) + # geom_smooth(size = 1, aes(fill = Category), show.legend = FALSE) + theme_minimal() + scale_color_manual(values = cat_colors22[c(1,13,11,20,5,18)], name=&quot;Threat Category&quot;, labels=u.threat_list) + scale_fill_manual(values = cat_colors7) + labs(x=&quot;Year&quot;, y=&quot;Money ($US Million)&quot;, title=&quot;Amount of Money Allocated Across Unique Threat Categories per Year&quot;) + scale_y_continuous(#labels = waiver(), breaks = c(0,50e6,10e7), labels = c(&quot;0&quot;,&quot;50&quot;,&quot;100&quot;), position = &quot;right&quot;) + theme(axis.text = element_text(size = 14), axis.title = element_text(size = 16, face = &quot;bold&quot;), legend.title = element_text(size = 14), legend.text = element_text(size = 12), legend.key.width = unit(1,&quot;cm&quot;), # legend.box.spacing = unit(1,&quot;cm&quot;), legend.spacing.x = unit(1,&quot;cm&quot;), legend.position = &quot;bottom&quot;) # legend.background = element_rect(color = &quot;black&quot;, size = 1.2, fill = NA)) # ggsave(threat_temporal.plot, filename = &quot;~/Columbia E3B/Conservation Group/Output V15.2/Figures/threat_temporal.png&quot;, width=12, height=7,dpi = 300) threat_temporal.plot 5.2.3 Figure 3: Taxa/Threat Maxwell Comparison INSERT FIGURE CAPTION FROM MANUSCRIPT #### Coercing Maxwell’s species designations to merge with ours We are merging the various taxa catgories used by Maxwell et al. to examine the amount of funding disbursed to various taxa. Maxwell et al.’s taxonic designations are at a higher resolution than the what we need, so we are altering them to fit the taxonomic scale we’re operating at. maxwell.s4 &lt;- read_csv(&quot;~/Columbia E3B/Conservation Group/Maxwell et al table S4.csv&quot;) names(maxwell.s4) # Our species: Amphibians, Birds, Fish, Invertebrates, Mammals, Plants, Reptiles our.species &lt;- maxwell.s4 %&gt;% slice(1:10) %&gt;% mutate(Amphibians = Amphibia, Birds = Aves, Fish = Actinopterygii + Chondrichthyes, Invertebrates = Anthozoa + Gastropoda + Hydrozoa + Malacostraca + Myxini, Mammals = Mammalia, Plants = Cycadopsida + Liliopsida + Magnoliopsida + Pinopsida, Reptiles = Reptilia) %&gt;% dplyr::select(c(2,3, 19:ncol(.), 18)) our.species 5.2.3.1 Figure 3 # Preparing maxwell data fig.3.maxwell_data &lt;- our.species %&gt;% dplyr::select(2:11) %&gt;% group_by(Category) %&gt;% summarise_at(vars(Total:Reptiles), sum) %&gt;% dplyr::select(3:length(.)) %&gt;% mutate(Total.maxwell = rowSums(.)) %&gt;% dplyr::select(8,1:7) %&gt;% transmute_at(vars(-Total.maxwell), ~ (./Total.maxwell)*100) %&gt;% mutate(Threat = u.threat_list) %&gt;% dplyr::select(8,1:7) %&gt;% pivot_longer(Amphibians:Reptiles, names_to = &quot;Taxa&quot;, values_to = &quot;Percent&quot;) %&gt;% mutate(Source = &quot;IUCN&quot;, direction = -1, alpha = 0.9) # Preparing money data taxa_climate &lt;- money.data_bio %&gt;% filter(cat_threat_climate &gt; 0) %&gt;% dplyr::select(cat_taxa_amphibian:cat_taxa_reptile) %&gt;% pivot_longer(cat_taxa_amphibian:cat_taxa_reptile, names_to = &quot;Category&quot;, values_to = &quot;Money&quot;) %&gt;% group_by(Category) %&gt;% summarize(totalAmount = sum(Money)) %&gt;% mutate(perc = totalAmount/sum(totalAmount)) %&gt;% dplyr::select(perc) %&gt;% t() %&gt;% as.data.frame(row.names = &quot;cat_threat_climate&quot;) %&gt;% `colnames&lt;-` (u.taxa_list) taxa_energy &lt;- money.data_bio %&gt;% filter(cat_threat_energytransport &gt; 0) %&gt;% dplyr::select(cat_taxa_amphibian:cat_taxa_reptile) %&gt;% pivot_longer(cat_taxa_amphibian:cat_taxa_reptile, names_to = &quot;Category&quot;, values_to = &quot;Money&quot;) %&gt;% group_by(Category) %&gt;% summarize(totalAmount = sum(Money)) %&gt;% mutate(perc = totalAmount/sum(totalAmount)) %&gt;% dplyr::select(perc) %&gt;% t() %&gt;% as.data.frame(row.names = &quot;cat_threat_energytransport&quot;) %&gt;% `colnames&lt;-` (u.taxa_list) taxa_habitat &lt;- money.data_bio %&gt;% filter(cat_threat_habitat &gt; 0) %&gt;% dplyr::select(cat_taxa_amphibian:cat_taxa_reptile) %&gt;% pivot_longer(cat_taxa_amphibian:cat_taxa_reptile, names_to = &quot;Category&quot;, values_to = &quot;Money&quot;) %&gt;% group_by(Category) %&gt;% summarize(totalAmount = sum(Money)) %&gt;% mutate(perc = totalAmount/sum(totalAmount)) %&gt;% dplyr::select(perc) %&gt;% t() %&gt;% as.data.frame(row.names = &quot;cat_threat_habitat&quot;) %&gt;% `colnames&lt;-` (u.taxa_list) taxa_inv &lt;- money.data_bio %&gt;% filter(cat_threat_inv_spec &gt; 0) %&gt;% dplyr::select(cat_taxa_amphibian:cat_taxa_reptile) %&gt;% pivot_longer(cat_taxa_amphibian:cat_taxa_reptile, names_to = &quot;Category&quot;, values_to = &quot;Money&quot;) %&gt;% group_by(Category) %&gt;% summarize(totalAmount = sum(Money)) %&gt;% mutate(perc = totalAmount/sum(totalAmount)) %&gt;% dplyr::select(perc) %&gt;% t() %&gt;% as.data.frame(row.names = &quot;cat_threat_inv_spec&quot;) %&gt;% `colnames&lt;-` (u.taxa_list) taxa_overexp &lt;- money.data_bio %&gt;% filter(cat_threat_overexp &gt; 0) %&gt;% dplyr::select(cat_taxa_amphibian:cat_taxa_reptile) %&gt;% pivot_longer(cat_taxa_amphibian:cat_taxa_reptile, names_to = &quot;Category&quot;, values_to = &quot;Money&quot;) %&gt;% group_by(Category) %&gt;% summarize(totalAmount = sum(Money)) %&gt;% mutate(perc = totalAmount/sum(totalAmount)) %&gt;% dplyr::select(perc) %&gt;% t() %&gt;% as.data.frame(row.names = &quot;cat_threat_overexp&quot;) %&gt;% `colnames&lt;-` (u.taxa_list) taxa_pollution &lt;- money.data_bio %&gt;% filter(cat_threat_pollution &gt; 0) %&gt;% dplyr::select(cat_taxa_amphibian:cat_taxa_reptile) %&gt;% pivot_longer(cat_taxa_amphibian:cat_taxa_reptile, names_to = &quot;Category&quot;, values_to = &quot;Money&quot;) %&gt;% group_by(Category) %&gt;% summarize(totalAmount = sum(Money)) %&gt;% mutate(perc = totalAmount/sum(totalAmount)) %&gt;% dplyr::select(perc) %&gt;% t() %&gt;% as.data.frame(row.names = &quot;cat_threat_pollution&quot;) %&gt;% `colnames&lt;-` (u.taxa_list) fig.3.money_data &lt;- bind_rows(taxa_climate, taxa_energy, taxa_habitat, taxa_inv, taxa_overexp, taxa_pollution) %&gt;% transmute_all(~.*100) %&gt;% mutate(Threat = u.threat_list) %&gt;% dplyr::select(8, 1:7) %&gt;% pivot_longer(Amphibians:Reptiles, names_to = &quot;Taxa&quot;, values_to = &quot;Percent&quot;) %&gt;% mutate(Source = &quot;Money&quot;, direction = 1, alpha = 1) ### 1 plot fig.3.data &lt;- bind_rows(fig.3.money_data, fig.3.maxwell_data) %&gt;% mutate(Percent = Percent * direction, Taxa = factor(Taxa, levels = c(&quot;Reptiles&quot;, &quot;Amphibians&quot;, &quot;Invertebrates&quot;, &quot;Birds&quot;, &quot;Mammals&quot;, &quot;Fish&quot;, &quot;Plants&quot;), ordered = TRUE), Threat = factor(Threat, levels = c(&quot;Climate Change&quot;, &quot;Overexploitation&quot;, &quot;Habitat Loss&quot;, &quot;Energy &amp; Transportation&quot;, &quot;Pollution&quot;, &quot;Invasive Species&quot;), ordered = TRUE) ) fig.3 &lt;- ggplot(fig.3.data %&gt;% filter(Taxa != &quot;Reptiles&quot;), aes(x = Taxa, y = Percent, fill = Taxa)) + geom_col(show.legend = F , color = &quot;black&quot;) + geom_hline(yintercept = 0, size = 1.2) + scale_fill_manual(values = cat_colors22[c(9,20,19,15,7,11)], name = &quot;Taxa&quot;, labels = u.taxa_list) + facet_wrap(~Threat) + theme_bw() + theme(axis.ticks.y= element_blank(), # axis.text.y = element_text(size = 10, face = &quot;bold&quot;), axis.text.x = element_blank(), # axis.text.y = element_text(size = 12), # axis.title = element_text(size = 16, face = &quot;bold&quot;), axis.ticks.x=element_line(color=NA), strip.background = element_rect(fill = &quot;black&quot;), strip.text = element_text(size = 12, color = &quot;white&quot;, face = &quot;bold&quot;)) + ylim(-90,90) + ggtitle(&quot;Percent of Taxa Threatened (IUCN) by vs. Funded for Unique Threats&quot;) + ylab(&quot;% Taxa Threatened | % Funding to Taxa&quot;) + coord_flip() # ggsave(fig.3, filename = &quot;~/Columbia E3B/Conservation Group/Output V15.2/Figures/taxa_threat_comparison.png&quot;, width=12, height=7,dpi = 300) fig.3 5.2.4 Figure 4: Network Analysis "],
["figure-4-threats-network-analysis.html", "Section 6 Figure 4: Threats Network Analysis 6.1 Threat Category Overlap 6.2 Pie Charts 6.3 Supplemental Figures", " Section 6 Figure 4: Threats Network Analysis The code presented here for Figure 4 generates the pie charts for each threat category that can be seen in the full network analysis figure. The actual network analysis was conducted separately, in WHERE WAS THIS CONDUCTED?. 6.1 Threat Category Overlap 6.2 Pie Charts blank_theme &lt;- theme_minimal() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), panel.border = element_blank(), panel.grid = element_blank(), axis.ticks = element_blank(), plot.title=element_text(size=14, face=&quot;bold&quot;)) 6.2.1 # of Threats within Threat categories (number of grants, not $) 6.2.1.1 Climate pie.Nthreats_climate &lt;- money.data.multi_bio %&gt;% filter(cat_threat_climate &gt; 0) %&gt;% dplyr::select(Num.Thr) %&gt;% mutate(Num.Thr = as.factor(Num.Thr)) %&gt;% mutate(Count = 1) %&gt;% group_by(Num.Thr) %&gt;% summarize(totalCount = sum(Count)) %&gt;% mutate(perc = totalCount/sum(totalCount), alpha = seq(0.2,1,0.2)) plot.pie.Nthreats_climate &lt;- ggplot(pie.Nthreats_climate, aes(y = perc, x = &quot;&quot;, fill = Num.Thr)) + geom_bar(stat = &quot;identity&quot;, color = &quot;white&quot;) + theme_minimal() + scale_fill_manual(values = seq_gradient_pal(cat_colors22[1], &quot;white&quot;, &quot;Lab&quot;)(seq(0,1, length.out = 5))) + # scale_fill_manual(values = c(&quot;#a50f15&quot;,&quot;#de2d26&quot;,&quot;#fb6a4a&quot;,&quot;#fcae91&quot;,&quot;#fee5d9&quot;)) + # scale_fill_viridis_d(name = &quot;Number of Threats&quot;, option = &quot;D&quot;) + labs(title=&quot;Proportion of Climate Change Grants Classified into Multiple Threats&quot;) + coord_polar(&quot;y&quot;, start=0, direction = -1) + blank_theme + theme(axis.text.x = element_blank()) + geom_text(aes(x = c(rep(1.55,4), 1.65), label = paste0(round(perc*100,1), &quot;%&quot;)), position = position_stack(vjust = 0.5), size = 3, col = &quot;black&quot;) # ggsave(plot.pie.Nthreats_climate, filename = &quot;~/Columbia E3B/Conservation Group/Output V15.2/Figures/pie_Nthreats_climate.png&quot;, width=12, height=7,dpi = 300) plot.pie.Nthreats_climate 6.2.1.2 Energy/Transportation pie.Nthreats_energytransport &lt;- money.data.multi_bio %&gt;% filter(cat_threat_energytransport &gt; 0) %&gt;% dplyr::select(Num.Thr) %&gt;% mutate(Num.Thr = as.factor(Num.Thr)) %&gt;% mutate(Count = 1) %&gt;% group_by(Num.Thr) %&gt;% summarize(totalCount = sum(Count)) %&gt;% mutate(perc = totalCount/sum(totalCount)) plot.pie.Nthreats_energytransport &lt;- ggplot(pie.Nthreats_energytransport, aes(y = perc, x = &quot;&quot;, fill = Num.Thr)) + geom_bar(stat = &quot;identity&quot;, color = &quot;black&quot;) + theme_minimal() + scale_fill_manual(values = seq_gradient_pal(cat_colors22[13], &quot;white&quot;, &quot;Lab&quot;)(seq(0,1, length.out = 5))) + # scale_fill_viridis_d(name = &quot;Number of Threats&quot;) + labs(title=&quot;Proportion of Energy/Transportation Grants Classified into Multiple Threats&quot;) + coord_polar(&quot;y&quot;, start=0, direction = -1) + blank_theme + theme(axis.text.x = element_blank()) + geom_text(aes(x = c(rep(1.55,4), 1.65), label = paste0(round(perc*100,1), &quot;%&quot;)), position = position_stack(vjust = 0.5), size = 3, col = &quot;black&quot;) # ggsave(plot.pie.Nthreats_energytransport, filename = &quot;~/Columbia E3B/Conservation Group/Output V15.2/Figures/pie_Nthreats_energytransport.png&quot;, width=12, height=7,dpi = 300) plot.pie.Nthreats_energytransport 6.2.1.3 Habitat Loss pie.Nthreats_habitat &lt;- money.data.multi_bio %&gt;% filter(cat_threat_habitat &gt; 0) %&gt;% dplyr::select(Num.Thr) %&gt;% mutate(Num.Thr = as.factor(Num.Thr)) %&gt;% mutate(Count = 1) %&gt;% group_by(Num.Thr) %&gt;% summarize(totalCount = sum(Count)) %&gt;% mutate(perc = totalCount/sum(totalCount)) plot.pie.Nthreats_habitat &lt;- ggplot(pie.Nthreats_habitat, aes(y = perc, x = &quot;&quot;, fill = Num.Thr)) + geom_bar(stat = &quot;identity&quot;, color = &quot;white&quot;) + theme_minimal() + scale_fill_manual(values = seq_gradient_pal(cat_colors22[11], &quot;white&quot;, &quot;Lab&quot;)(seq(0,1, length.out = 5))) + # scale_fill_viridis_d(name = &quot;Number of Threats&quot;, end = 0.8) + labs(title=&quot;Proportion of Habitat Loss Grants Classified into Multiple Threats&quot;) + coord_polar(&quot;y&quot;, start=0, direction = -1) + blank_theme + theme(axis.text.x = element_blank()) + geom_text(aes(x = c(rep(1.55,4)), label = paste0(round(perc*100,1), &quot;%&quot;)), position = position_stack(vjust = 0.5), size = 3, col = &quot;black&quot;) ggsave(plot.pie.Nthreats_habitat, filename = &quot;~/Columbia E3B/Conservation Group/Output V15.2/Figures/pie_Nthreats_habitat.png&quot;, width=12, height=7,dpi = 300) plot.pie.Nthreats_habitat 6.2.1.4 Invasive Species pie.Nthreats_inv_spec &lt;- money.data.multi_bio %&gt;% filter(cat_threat_inv_spec &gt; 0) %&gt;% dplyr::select(Num.Thr) %&gt;% mutate(Num.Thr = as.factor(Num.Thr)) %&gt;% mutate(Count = 1) %&gt;% group_by(Num.Thr) %&gt;% summarize(totalCount = sum(Count)) %&gt;% mutate(perc = totalCount/sum(totalCount)) plot.pie.Nthreats_inv_spec &lt;- ggplot(pie.Nthreats_inv_spec, aes(y = perc, x = &quot;&quot;, fill = Num.Thr)) + geom_bar(stat = &quot;identity&quot;, color = &quot;black&quot;) + theme_minimal() + scale_fill_manual(values = seq_gradient_pal(cat_colors22[20], &quot;white&quot;, &quot;Lab&quot;)(seq(0,1, length.out = 5))) + # scale_fill_viridis_d(name = &quot;Number of Threats&quot;) + labs(title=&quot;Proportion of Invasive Species Grants Classified into Multiple Threats&quot;) + coord_polar(&quot;y&quot;, start=0, direction = -1) + blank_theme + theme(axis.text.x = element_blank()) + geom_text(aes(x = c(rep(1.55,4), 1.65), label = paste0(round(perc*100,1), &quot;%&quot;)), position = position_stack(vjust = 0.5), size = 3, col = &quot;black&quot;) ggsave(plot.pie.Nthreats_inv_spec, filename = &quot;~/Columbia E3B/Conservation Group/Output V15.2/Figures/pie_Nthreats_inv_spec.png&quot;, width=12, height=7,dpi = 300) plot.pie.Nthreats_inv_spec 6.2.1.5 Overexploitation pie.Nthreats_overexp &lt;- money.data.multi_bio %&gt;% filter(cat_threat_overexp &gt; 0) %&gt;% dplyr::select(Num.Thr) %&gt;% mutate(Num.Thr = as.factor(Num.Thr)) %&gt;% mutate(Count = 1) %&gt;% group_by(Num.Thr) %&gt;% summarize(totalCount = sum(Count)) %&gt;% mutate(perc = totalCount/sum(totalCount)) plot.pie.Nthreats_overexp &lt;- ggplot(pie.Nthreats_overexp, aes(y = perc, x = &quot;&quot;, fill = Num.Thr)) + geom_bar(stat = &quot;identity&quot;, color = &quot;white&quot;) + theme_minimal() + scale_fill_manual(values = seq_gradient_pal(cat_colors22[5], &quot;white&quot;, &quot;Lab&quot;)(seq(0,1, length.out = 5))) + # scale_fill_viridis_d(name = &quot;Number of Threats&quot;) + labs(title=&quot;Proportion of Overexploitation Grants Classified into Multiple Threats&quot;) + coord_polar(&quot;y&quot;, start=0, direction = -1) + blank_theme + theme(axis.text.x = element_blank()) + geom_text(aes(x = c(rep(1.55,4), 1.65), # label = paste0(round(perc*100,1), &quot;%&quot;)), label = str_glue(&quot;{round(perc*100,1)}% ({totalCount})&quot;)), position = position_stack(vjust = 0.5), size = 3, col = &quot;black&quot;) ggsave(plot.pie.Nthreats_overexp, filename = &quot;~/Columbia E3B/Conservation Group/Output V15.2/Figures/pie_Nthreats_overexp.png&quot;, width=12, height=7,dpi = 300) plot.pie.Nthreats_overexp 6.2.1.5.1 Prop Overxploitation funding pie.threats_overexp &lt;- money.data.multi_bio %&gt;% filter(cat_threat_overexp &gt; 0) %&gt;% dplyr::select(Num.Thr, cat_threat_overexp) %&gt;% group_by(Num.Thr) %&gt;% summarize(total = sum(cat_threat_overexp)) %&gt;% mutate(perc = total/sum(total)) 6.2.1.6 Pollution pie.Nthreats_pollution &lt;- money.data.multi_bio %&gt;% filter(cat_threat_pollution &gt; 0) %&gt;% dplyr::select(Num.Thr) %&gt;% mutate(Num.Thr = as.factor(Num.Thr)) %&gt;% mutate(Count = 1) %&gt;% group_by(Num.Thr) %&gt;% summarize(totalCount = sum(Count)) %&gt;% mutate(perc = totalCount/sum(totalCount)) plot.pie.Nthreats_pollution &lt;- ggplot(pie.Nthreats_pollution, aes(y = perc, x = &quot;&quot;, fill = Num.Thr)) + geom_bar(stat = &quot;identity&quot;, color = &quot;white&quot;) + theme_minimal() + scale_fill_manual(values = seq_gradient_pal(cat_colors22[18], &quot;white&quot;, &quot;Lab&quot;)(seq(0,1, length.out = 5))) + # scale_fill_viridis_d(name = &quot;Number of Threats&quot;) + labs(title=&quot;Proportion of Pollution Funding Classified into Multiple Threats&quot;) + coord_polar(&quot;y&quot;, start=0, direction = -1) + blank_theme + theme(axis.text.x = element_blank()) + geom_text(aes(x = c(rep(1.55,4), 1.65), label = paste0(round(perc*100,1), &quot;%&quot;)), position = position_stack(vjust = 0.5), size = 3, col = &quot;black&quot;) ggsave(plot.pie.Nthreats_pollution, filename = &quot;~/Columbia E3B/Conservation Group/Output V15.2/Figures/pie_Nthreats_pollution.png&quot;, width=12, height=7,dpi = 300) plot.pie.Nthreats_pollution 6.3 Supplemental Figures 6.3.1 Figure S1: Total Biodiversity/Climate Change Grantmaking by Top 1000 Grantmakers donor_Rank &lt;- c(&quot; &quot;, &quot;Top 50&quot;, &quot;Top 100&quot;, &quot;Top 200&quot;, &quot;Top 300&quot;, &quot;Top 400&quot;, &quot;Top 500&quot;, &quot;Top 600&quot;, &quot;Top 700&quot;, &quot;Top 800&quot;, &quot;Top 900&quot;, &quot;Top 1000&quot;) sum &lt;- c(0, 14396513202, 16440571398, 18171144637, 18975986509, 19490663536, 19851261916, 20128241008, 20348022885, 20525790876, 20670921174, 20793224389) sum_mildiv &lt;- sum/1000000 axis_Order &lt;- c(1:12) sum.data &lt;- data.frame(donor_Rank, sum, sum_mildiv, axis_Order) sum_graph &lt;- ggplot(data = sum.data, mapping = aes(x = axis_Order, y = sum_mildiv, group = 1) ) + geom_line() + geom_point() + geom_area(aes(y=ifelse(sum_mildiv&gt;=0 &amp; sum_mildiv&lt; 19851.26, sum_mildiv, 19851.26)), fill=&quot;#696969&quot;, alpha = .4) + ylim(0, 21500) + theme_minimal() + xlab(&quot;Grantmaker Group&quot;) + ylab(&quot;Sum ($1,000,000USD)&quot;) + scale_x_discrete(limits=c(&quot; &quot;, &quot;Top 50&quot;, &quot;Top 100&quot;, &quot;Top 200&quot;, &quot;Top 300&quot;, &quot;Top 400&quot;, &quot;Top 500&quot;, &quot;Top 600&quot;, &quot;Top 700&quot;, &quot;Top 800&quot;, &quot;Top 900&quot;, &quot;Top 1000&quot;)) sum_graph "]
]
