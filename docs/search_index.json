[
["index.html", "Conservation funding does not track drivers of biodiversity loss Section 1 Introduction 1.1 Attribution 1.2 Data access 1.3 Data processing 1.4 Affiliations", " Conservation funding does not track drivers of biodiversity loss Vijay Ramesh1*, Jay Schoen1, Michael Levin1, Pratik Dubal2, Rochelle Thomas1, Sebastian Heilpern1, Jared Meek1, Pooja Choksi1, Don J Melnick1, Sara Kross1\" 2020-09-17 Section 1 Introduction This is the bookdown version of a repository that contains code and analyses associated with Ramesh et. al. (in review). 1.1 Attribution Please contact the following in case of interest in the project. Vijay Ramesh (lead author) PhD student, Columbia University 1.2 Data access The following files are required to reproduce our analysis. all-grants.csv: A sheet containing all grant data. list-of-preprocessing-phrases.csv: A sheet containing phrases which need to removed before classification. list-of-keywords.csv: A sheet containing keywords which will be used to perform the rule-based classification. list-of-stopwords.csv: A sheet containing stopwords, which need to be used to post-process and filter the classification results. 1.3 Data processing The data processing for this project is described in the following sections. Navigate through them using the links in the sidebar. 1.4 Affiliations 1Department of Ecology, Evolution and Environmental Biology, Columbia University, 1200 Amsterdam Avenue, New York, NY 10027. 2Department of Computer Science, Columbia University, New York, NY 10027. *Corresponding author. Email: vr2352@columbia.edu "],
["pre-processing-and-filtering-of-grants.html", "Section 2 Pre-processing and filtering of grants", " Section 2 Pre-processing and filtering of grants Here, we will filter our list our grants using our pre-processing phrases and use our list of keywords to carry out our rule-based classification import re import csv import tqdm import numpy as np import pandas as pd def string_found(string1, string2): if re.search(r&quot;\\b&quot; + re.escape(string1) + r&quot;\\b&quot;, string2): return True return False Preprocessing to remove grants which are empty, operating support, etc. data = pd.read_csv(&#39;data\\\\all-grants.csv&#39;) preproc_ph = pd.read_csv(&#39;data\\\\list-of-preprocessing-phrases.csv&#39;) preproc_phrases = list(preproc_ph.Phrases) data = data.drop([ele for ele in data.columns.to_list() if ele not in [&#39;Description&#39;]], axis=1) data = data.dropna().reset_index(drop=True) for phrase in preproc_phrases[:6]: data = data[~data.Description.str.contains(phrase)] for phrase in preproc_phrases[6:]: data = data[data.Description.str.lower() != phrase] data_sentences = data.Description.values.tolist() data_sentences = [x.lower() for x in data_sentences] # Bigrams/Keywords to be searched as substrings in description keywords_df = pd.read_csv(&#39;~data/list-of-keywords.csv&#39;) category_names = [x.strip() for x in list(keywords_df)] keywords = [] for idx in range(len(category_names)): keywords.append(list(set(keywords_df[category_names[idx]].dropna()))) grant_categories = [] grant_keywords = [] pbar = tqdm.tqdm(total=len(data_sentences)) for grant in data_sentences: curr_cat = [] curr_key = [] for idx in range(len(category_names)): for keyword in keywords[idx]: if string_found(keyword, grant): curr_key.append(keyword.replace(&#39; &#39;, &#39;_&#39;)) curr_cat.append(category_names[idx]) grant_categories.append(curr_cat) grant_keywords.append(curr_key) pbar.update(1) pbar.close() # Store description, keywords and categories as csv output_grants = [] pbar = tqdm.tqdm(total=len(data_sentences)) for idx in range(len(data_sentences)): temp = [] temp.append(data_sentences[idx]) temp.append(&quot;|&quot;.join(grant_keywords[idx])) temp.append(&quot;|&quot;.join(grant_categories[idx])) output_grants.append(temp) pbar.update(1) pbar.close() with open(&quot;data\\\\output-grants.csv&quot;, &quot;w&quot;, newline=&quot;&quot;) as f: writer = csv.writer(f) writer.writerow([&#39;Description&#39;, &#39;Keywords&#39;, &#39;Categories&#39;]) writer.writerows(output_grants) "],
["stopword-filtering.html", "Section 3 Stopword filtering", " Section 3 Stopword filtering Here, we will use a list of stopwords to further refine our output from our classification import re import csv import tqdm import numpy as np import pandas as pd def string_found(string1, string2): if re.search(r&quot;\\b&quot; + re.escape(string1) + r&quot;\\b&quot;, string2): return True return False output_grants = &#39;data\\\\output-grants.csv&#39; stopwords_csv = &#39;data\\\\list-of-stopwords.csv&#39; output_filtered = &#39;data\\\\output-grants-filtered.csv.csv&#39; output_data = pd.read_csv(output_grants) output_data[&#39;Stopwords&#39;] = &quot;-&quot; output_data[&#39;Filtered_Categories&#39;] = &quot;-&quot; stopwords_df = pd.read_csv(stopwords_csv) stopwords_dict = dict() for cat in [x.strip() for x in list(stopwords_df)]: temp = list(set(stopwords_df[cat].dropna())) temp = [x.lower() for x in temp] stopwords_dict[cat] = temp pbar = tqdm.tqdm(total=len(output_data)) for idx in range(len(output_data)): class_cats = list(output_data.iloc[idx][&#39;Categories&#39;].split(&#39;|&#39;)) stop_added = [] flag = False for stop_cat in stopwords_dict.keys(): if stop_cat in class_cats: for stopword in stopwords_dict[stop_cat]: if string_found(stopword, output_data.iloc[idx][&#39;Description&#39;].lower()): class_cats.remove(stop_cat) stop_added.append(stopword) break output_data.loc[idx,&#39;Filtered_Categories&#39;] = &#39;|&#39;.join(list(set(class_cats))) if len(stop_added) &gt; 0: output_data.loc[idx, &#39;Stopwords&#39;] = &#39;|&#39;.join(list(set(stop_added))) pbar.update(1) pbar.close() output_data[output_data.Stopwords != &#39;-&#39;] output_data.to_csv(output_filtered, index=False) "],
["preparation-of-a-final-dataframe-of-classified-grants.html", "Section 4 Preparation of a final dataframe of classified grants", " Section 4 Preparation of a final dataframe of classified grants Here we prepare a final datafame for analysis of threats, taxonomic groups and proportion of funding import pandas as pd import numpy as np import math import tqdm from sklearn.preprocessing import MultiLabelBinarizer mlb = MultiLabelBinarizer() data = pd.read_csv(&#39;data\\\\all-grants.csv&#39;) preproc_ph = pd.read_csv(&#39;data\\\\list-of-preprocessing-phrases.csv&#39;) preproc_phrases = list(preproc_ph.Phrases) data = data.drop([ele for ele in data.columns.to_list() if ele in [&#39;X&#39;, &#39;Random Sort&#39;, &#39;Unnamed: 0&#39;]], axis=1) data = data.dropna(subset=[&#39;Description&#39;]) for phrase in preproc_phrases[:6]: data = data[~data.Description.str.contains(phrase)] for phrase in preproc_phrases[6:]: data = data[data.Description.str.lower() != phrase] data = data.reset_index(drop=True) data_class = pd.read_csv(&#39;data\\\\output-grants-filtered.csv&#39;) data_class = data_class.fillna(&#39;-&#39;) pbar = tqdm.tqdm(total=len(data)) for idx in range(len(data)): for col in data_class.columns[1:]: if type(data_class[col][idx]) == str: data_class[col][idx] = list(set(data_class[col][idx].split(&#39;|&#39;))) pbar.update(1) pbar.close() df_final = pd.concat([data, data_class[[&#39;Keywords&#39;, &#39;Filtered_Categories&#39;, &#39;Bio_keywords&#39;]]], axis=1) df_final = df_final.join(pd.DataFrame(mlb.fit_transform(df_final.pop(&#39;Filtered_Categories&#39;)),columns=[&#39;cat_&#39; + x for x in mlb.classes_],index=df_final.index)) df_final = df_final.join(pd.DataFrame(mlb.fit_transform(df_final.pop(&#39;Bio_keywords&#39;)),columns=[&#39;bio_key_&#39; + x for x in mlb.classes_],index=df_final.index)) df_final = df_final.drop([&#39;cat_-&#39;, &#39;bio_key_-&#39;], axis=1) df_final.to_csv(&#39;data\\\\classified-grants-for-analysis.csv&#39;, index=False) "],
["post-processing-of-grants-following-validation.html", "Section 5 Post-processing of grants following validation", " Section 5 Post-processing of grants following validation Here we remove and filter those grants that may have been erroneously classified, following the process of validation Here we hard-coded several specific fixes to the classification that repeatedly cropped up during our validation process. All have been checked to have 0 mis-classifications. # Removing grants containing &quot;dinner&quot; dat &lt;- dat %&gt;% filter(str_detect(Description, &quot;dinner&quot;) == FALSE) # Classifying &quot;dissemination&quot; as act_edu sum(dat$cat_act_edu) for(i in 1:nrow(dat)) { if(str_detect(dat$Description[i], &quot;dissemination&quot;) == TRUE) { dat$cat_act_edu[i] = 1 } } sum(dat$cat_act_edu) # Removing threat_energytransport classification for &quot;palm oil&quot; sum(dat$cat_threat_energytransport) for(i in 1:nrow(dat)) { if(str_detect(dat$Description[i], &quot;palm oil|oil-palm|oil palm&quot;) == TRUE) { dat$cat_threat_energytransport[i] = 0 } } sum(dat$cat_threat_energytransport) # Removing hab_other classification for &quot;aquatic&quot; (will be freshwater/marine) sum(dat$cat_habitat_other) for(i in 1:nrow(dat)) { if(str_detect(dat$Description[i], &quot;aquatic&quot;) == TRUE) { dat$cat_habitat_other[i] = 0 } } sum(dat$cat_habitat_other) Those grants with no funding amount recorded contributed nothing to this analysis, and were removed. dat.1 &lt;- dat %&gt;% drop_na(Grant.Amount) %&gt;% dplyr::select(1:42) names(dat.1) We ensured that our study focused on in situ conservation grants by eliminating grants that were directed toward captive management (aquarium/zoo category) for(i in 1:nrow(dat.1)){ if(dat.1$cat_aquarium_zoo[i]==1){ dat.1[i,c(11:17, 19:28, 30:42)]=0 } } write_csv(dat,&quot;data\\\\post-processed-grants-for-analysis.csv&quot;) "],
["exploratory-data-analysis.html", "Section 6 Exploratory data analysis", " Section 6 Exploratory data analysis Here, we will carry out exploratory data analysis of grants to obtain a sense of how money has been allocated across threat and taxonomic groups. Dealing with grants that were classified into multiple categories The code below governs the way we dealt with multiple, potentially overlapping categories on individual grants. The general format is as follows: If a grant description had two keyword matches with two sub-categories of the same category (e.g. threat_climate &amp; threat_energytransport), it was classified into a joint sub-category (threat_climate_energytransport). Grants that were classified into three or more sub-categories within a category (e.g. threat_climate &amp; threat_energytransport &amp; threat_pollution) were classified into a sub-category labeled as “other” (e.g. threat_other). Read in the post-processed grants for analysis dat.1 &lt;- read_csv(&#39;data\\\\post-processed-grants-for-analysis.csv&#39;) Here, we built dummy variables that take the sum of our binary classification data across the columns of each broader category. dat.1 &lt;- dat.1 %&gt;% mutate(Num.Class = rowSums(.[,11:length(.)])) %&gt;% mutate(Num.Thr = rowSums(.[37:42])) %&gt;% mutate(Num.Act = rowSums(.[11:17])) %&gt;% mutate(Num.Hab = rowSums(.[c(25,26,28)])) %&gt;% mutate(Num.Tax = rowSums(.[30:36])) %&gt;% mutate(Num.Bio = rowSums(.[19:20])) Multiple threat categories threat &lt;- dat.1[,c(1:10, 37:42)] threat &lt;- threat %&gt;% mutate(sumAcross = cat_threat_climate + cat_threat_energytransport + cat_threat_habitat + cat_threat_inv_spec + cat_threat_overexp + cat_threat_pollution) %&gt;% filter(sumAcross &gt; 0) # Checking number of grants/money for multiple threat category grants tot_threat &lt;- sum(threat$Grant.Amount, na.rm = T) # Four or more threats retained all grants threat4 &lt;- threat %&gt;% filter(sumAcross &lt;= 4) nrow(threat4)/nrow(threat) sum(threat4$Grant.Amount,na.rm = T)/tot_threat # Three threats retains 99.3% of the money threat3 &lt;- threat %&gt;% filter(sumAcross &lt;= 3) nrow(threat3)/nrow(threat) sum(threat3$Grant.Amount,na.rm = T)/tot_threat # Two threats retained 96% of the money threat2 &lt;- threat %&gt;% filter(sumAcross &lt;= 2) nrow(threat2)/nrow(threat) sum(threat2$Grant.Amount, na.rm = T)/tot_threat # Unique threat categories retained 80.3% of the money threat1 &lt;- threat %&gt;% filter(sumAcross &lt;= 1) nrow(threat1)/nrow(threat) sum(threat1$Grant.Amount,na.rm = T)/tot_threat Plot multiple threat categories and grants n_threats &lt;- 1:4 n_threat_grants &lt;- c(nrow(threat1), nrow(threat2) - nrow(threat1), nrow(threat3) - nrow(threat2), nrow(threat4) - nrow(threat3)) threats &lt;- data.frame(n_threats, n_threat_grants) fig_threats_grants &lt;- ggplot(threats, aes(x = n_threats, y = n_threat_grants)) + geom_line() + theme_bw() + labs(title = &quot;Number of grants across multiple Threat Categories&quot;, x=&quot;Number of threat categories&quot;, y=&quot;Number of grants&quot;) # save as png ggsave(fig_threats_grants, filename = &quot;figs/fig_threats_grants.png&quot;, height = 4, width = 6, device = png(), dpi = 300); dev.off() # show exported image knitr::include_graphics(&quot;figs/fig_threats_grants.png&quot;) (#fig:export_fig_threats_grants)Number of grants that were classified into one or more categories of threat Following the above analysis, we decided to retain grants classified across multiple threat categories for the network analysis. Below we visualize overall funding provided by the top 1000 grantmakers (Supplementary Fig S1 - Accumulation of Funding Across Top Grantmakers) # Create donor ranks donor_Rank &lt;- c(&quot; &quot;, &quot;Top 50&quot;, &quot;Top 100&quot;, &quot;Top 200&quot;, &quot;Top 300&quot;, &quot;Top 400&quot;, &quot;Top 500&quot;, &quot;Top 600&quot;, &quot;Top 700&quot;, &quot;Top 800&quot;, &quot;Top 900&quot;, &quot;Top 1000&quot;) # The values below were calculated by summing funding for each of the above donor ranks sum &lt;- c(0, 14396513202, 16440571398, 18171144637, 18975986509, 19490663536, 19851261916, 20128241008, 20348022885, 20525790876, 20670921174, 20793224389) sum_mildiv &lt;- sum/1000000 axis_Order &lt;- c(1:12) sum.data &lt;- data.frame(donor_Rank, sum, sum_mildiv, axis_Order) fig_topGrantmakers_funding &lt;- ggplot(data = sum.data, mapping = aes(x = axis_Order, y = sum_mildiv, group = 1)) + geom_line() + geom_point() + geom_area(aes(y=ifelse(sum_mildiv&gt;=0 &amp; sum_mildiv&lt; 19851.26, sum_mildiv, 19851.26)), fill=&quot;#696969&quot;, alpha = .4) + ylim(0, 21500) + theme_minimal() + xlab(&quot;Grantmaker Group&quot;) + ylab(&quot;Sum ($1,000,000USD)&quot;) + scale_x_discrete(limits=c(&quot; &quot;, &quot;Top 50&quot;, &quot;Top 100&quot;, &quot;Top 200&quot;, &quot;Top 300&quot;, &quot;Top 400&quot;, &quot;Top 500&quot;, &quot;Top 600&quot;, &quot;Top 700&quot;, &quot;Top 800&quot;, &quot;Top 900&quot;, &quot;Top 1000&quot;)) # save as png ggsave(fig_topGrantmakers_funding, filename = &quot;figs/fig_topGrantmakers_funding.png&quot;, height = 4, width = 6, device = png(), dpi = 300); dev.off() # show exported image knitr::include_graphics(&quot;figs/fig_topGrantmakers_funding.png&quot;) (#fig:export_fig_topGrantmakers_funding)Accumulation curve of the funding in our dataset across the top 1000 grantmakers. The shaded region encompasses the amount of funding captured by the top 500 grantmakers, which represents more than 95% of the total amount of funding. "],
["threat-mismatch-calculations.html", "Section 7 Threat-mismatch calculations", " Section 7 Threat-mismatch calculations We estimate if the amount of funding to drivers of biodiversity loss tracks the number of species threatened by each of these drivers # Load libraries library(tidyverse) library(scales) library(ggsci) # Read in data of post-processed grants data &lt;- read_csv(&quot;data\\\\post-processed-grants-for-analysis.csv&quot;) %&gt;% as.data.frame() %&gt;% dplyr::select(c(1:42, 49:109, 43:48)) # data.multi &lt;- read_csv(&quot;~/Desktop/master_output_data_analysis_v15_mutlicategories.csv&quot;) %&gt;% as.data.frame() # Read in data on the number of species threatened (Maxwell et al. 2016) maxwell &lt;- read_csv(&quot;data\\\\2016-maxwell et al-Table S2.csv&quot;) %&gt;% as.data.frame() Figure 1: Proportion of Money vs. Species Threatened fig.1.money_bio &lt;- by.year.money_bio %&gt;% filter(Category %in% u.threat_cat) %&gt;% group_by(Category) %&gt;% summarise(Total = sum(Amount)) fig.1.species &lt;- maxwell %&gt;% dplyr::select(Category, n_species_threatened) %&gt;% group_by(Category) %&gt;% summarise(Total = sum(n_species_threatened)) rawFrame &lt;- left_join(fig.1.money_bio, fig.1.species, by = &quot;Category&quot;) %&gt;% mutate(rawMoney = Total.x) %&gt;% # Total Money mutate(rawSpecies = Total.y) %&gt;% # Total Species dplyr::select(Category, rawMoney, rawSpecies) fig.1.data_bio &lt;- left_join(fig.1.money_bio, fig.1.species, by = &quot;Category&quot;) %&gt;% mutate(Money = (Total.x/sum(Total.x))*100) %&gt;% # Percentage of Total Money mutate(Species = (Total.y/sum(Total.y))*100) %&gt;% # Percentage of Total Species dplyr::select(Category, Money, Species) %&gt;% pivot_longer(c(Money, Species), names_to = &quot;is.Money&quot;, values_to = &quot;Amount&quot;) %&gt;% left_join(rawFrame, by = &quot;Category&quot;) %&gt;% mutate(rawMoney = ifelse(is.Money == &quot;Species&quot;, NA, rawMoney)) %&gt;% mutate(rawSpecies= ifelse(is.Money == &quot;Money&quot;, NA, rawSpecies)) %&gt;% replace_na(list(rawMoney = &quot;&quot;, rawSpecies = &quot;&quot;)) %&gt;% unite(&quot;rawValue&quot;, rawMoney:rawSpecies, sep = &quot;&quot;, remove = FALSE) %&gt;% mutate(rawValue = as.numeric(rawValue), rawLabels = comma(rawValue)) fig.1.data_bio$rawLabels[c(seq(1,11,2))] &lt;- str_glue(&quot;${round(rawFrame$rawMoney/1e6)}m&quot;) # fig.1.data_bio$rawLabels[c(seq(2,12,2))] &lt;- rawFrame$rawSpecies fig.1.plot_bio &lt;- ggplot(fig.1.data_bio, aes(fill=is.Money, y=Amount, x=Category)) + geom_col(position=&quot;dodge&quot;) + labs(x=&quot;Threat Category&quot;, y=&quot;Percentage&quot;) + # title=&quot;% Money Allocated vs. % Species Threatened (IUCN) by Unique Threats&quot;) + scale_x_discrete(labels=u.threat_list) + scale_fill_manual(# values = c(&quot;#556B2F&quot;, &quot;#8f3c36&quot;), values = alpha(c(&quot;darkgreen&quot;, &quot;orangered4&quot;), 0.9), # values = c(&quot;#556B2F&quot;, &quot;#708090&quot;), labels = c(&quot;Money ($USD Million)&quot;, &quot;# Threatened Species&quot;)) + geom_text(position = position_dodge(width= 1), aes(label = rawLabels, hjust = 0.5, vjust = -0.5), angle=0, size=6) + ylim(0, 50) + theme_minimal() + theme(axis.title = element_text(size = 16, face = &quot;bold&quot;), axis.ticks.length.x = unit(.5, &quot;cm&quot;), axis.text = element_text(size = 14), legend.title = element_blank(), legend.key.size = unit(1,&quot;cm&quot;), legend.text = element_text(size = 12)) # ggsave(fig.1.plot_bio, filename = &quot;~/Columbia E3B/Conservation Group/Output V15.2/Figures/money_species_comparison.png&quot;, width=15, height=7,dpi = 300) fig.1.plot_bio "],
["temporal-trends.html", "Section 8 Temporal trends", " Section 8 Temporal trends Figure 2: Amount of Money Allocated Across Unique Threat Categories per Year threat_temporal.data &lt;- by.year.money_bio %&gt;% filter(Category %in% u.threat_cat) threat_temporal.plot &lt;- ggplot(threat_temporal.data, aes(y = Amount, x = Year.Authorized, color = Category)) + #geom_point() + geom_line(size = 2, linetype = 1) + # geom_smooth(size = 1, aes(fill = Category), show.legend = FALSE) + theme_minimal() + scale_color_manual(values = cat_colors22[c(1,13,11,20,5,18)], name=&quot;Threat Category&quot;, labels=u.threat_list) + scale_fill_manual(values = cat_colors7) + labs(x=&quot;Year&quot;, y=&quot;Money ($US Million)&quot;, title=&quot;Amount of Money Allocated Across Unique Threat Categories per Year&quot;) + scale_y_continuous(#labels = waiver(), breaks = c(0,50e6,10e7), labels = c(&quot;0&quot;,&quot;50&quot;,&quot;100&quot;), position = &quot;right&quot;) + theme(axis.text = element_text(size = 14), axis.title = element_text(size = 16, face = &quot;bold&quot;), legend.title = element_text(size = 14), legend.text = element_text(size = 12), legend.key.width = unit(1,&quot;cm&quot;), # legend.box.spacing = unit(1,&quot;cm&quot;), legend.spacing.x = unit(1,&quot;cm&quot;), legend.position = &quot;bottom&quot;) # legend.background = element_rect(color = &quot;black&quot;, size = 1.2, fill = NA)) # ggsave(threat_temporal.plot, filename = &quot;~/Columbia E3B/Conservation Group/Output V15.2/Figures/threat_temporal.png&quot;, width=12, height=7,dpi = 300) threat_temporal.plot "],
["taxononmic-groupsthreats-mismatch.html", "Section 9 Taxononmic groups/Threats mismatch", " Section 9 Taxononmic groups/Threats mismatch Figure 3: Taxa/Threat Maxwell Comparison Coercing Maxwell’s species designations to merge with ours We are merging the various taxa catgories used by Maxwell et al. to examine the amount of funding disbursed to various taxa. Maxwell et al.’s taxonic designations are at a higher resolution than the what we need, so we are altering them to fit the taxonomic scale we’re operating at. maxwell.s4 &lt;- read_csv(&quot;~/Columbia E3B/Conservation Group/Maxwell et al table S4.csv&quot;) names(maxwell.s4) # Our species: Amphibians, Birds, Fish, Invertebrates, Mammals, Plants, Reptiles our.species &lt;- maxwell.s4 %&gt;% slice(1:10) %&gt;% mutate(Amphibians = Amphibia, Birds = Aves, Fish = Actinopterygii + Chondrichthyes, Invertebrates = Anthozoa + Gastropoda + Hydrozoa + Malacostraca + Myxini, Mammals = Mammalia, Plants = Cycadopsida + Liliopsida + Magnoliopsida + Pinopsida, Reptiles = Reptilia) %&gt;% dplyr::select(c(2,3, 19:ncol(.), 18)) our.species 9.0.0.1 Figure 3 # Preparing maxwell data fig.3.maxwell_data &lt;- our.species %&gt;% dplyr::select(2:11) %&gt;% group_by(Category) %&gt;% summarise_at(vars(Total:Reptiles), sum) %&gt;% dplyr::select(3:length(.)) %&gt;% mutate(Total.maxwell = rowSums(.)) %&gt;% dplyr::select(8,1:7) %&gt;% transmute_at(vars(-Total.maxwell), ~ (./Total.maxwell)*100) %&gt;% mutate(Threat = u.threat_list) %&gt;% dplyr::select(8,1:7) %&gt;% pivot_longer(Amphibians:Reptiles, names_to = &quot;Taxa&quot;, values_to = &quot;Percent&quot;) %&gt;% mutate(Source = &quot;IUCN&quot;, direction = -1, alpha = 0.9) # Preparing money data taxa_climate &lt;- money.data_bio %&gt;% filter(cat_threat_climate &gt; 0) %&gt;% dplyr::select(cat_taxa_amphibian:cat_taxa_reptile) %&gt;% pivot_longer(cat_taxa_amphibian:cat_taxa_reptile, names_to = &quot;Category&quot;, values_to = &quot;Money&quot;) %&gt;% group_by(Category) %&gt;% summarize(totalAmount = sum(Money)) %&gt;% mutate(perc = totalAmount/sum(totalAmount)) %&gt;% dplyr::select(perc) %&gt;% t() %&gt;% as.data.frame(row.names = &quot;cat_threat_climate&quot;) %&gt;% `colnames&lt;-` (u.taxa_list) taxa_energy &lt;- money.data_bio %&gt;% filter(cat_threat_energytransport &gt; 0) %&gt;% dplyr::select(cat_taxa_amphibian:cat_taxa_reptile) %&gt;% pivot_longer(cat_taxa_amphibian:cat_taxa_reptile, names_to = &quot;Category&quot;, values_to = &quot;Money&quot;) %&gt;% group_by(Category) %&gt;% summarize(totalAmount = sum(Money)) %&gt;% mutate(perc = totalAmount/sum(totalAmount)) %&gt;% dplyr::select(perc) %&gt;% t() %&gt;% as.data.frame(row.names = &quot;cat_threat_energytransport&quot;) %&gt;% `colnames&lt;-` (u.taxa_list) taxa_habitat &lt;- money.data_bio %&gt;% filter(cat_threat_habitat &gt; 0) %&gt;% dplyr::select(cat_taxa_amphibian:cat_taxa_reptile) %&gt;% pivot_longer(cat_taxa_amphibian:cat_taxa_reptile, names_to = &quot;Category&quot;, values_to = &quot;Money&quot;) %&gt;% group_by(Category) %&gt;% summarize(totalAmount = sum(Money)) %&gt;% mutate(perc = totalAmount/sum(totalAmount)) %&gt;% dplyr::select(perc) %&gt;% t() %&gt;% as.data.frame(row.names = &quot;cat_threat_habitat&quot;) %&gt;% `colnames&lt;-` (u.taxa_list) taxa_inv &lt;- money.data_bio %&gt;% filter(cat_threat_inv_spec &gt; 0) %&gt;% dplyr::select(cat_taxa_amphibian:cat_taxa_reptile) %&gt;% pivot_longer(cat_taxa_amphibian:cat_taxa_reptile, names_to = &quot;Category&quot;, values_to = &quot;Money&quot;) %&gt;% group_by(Category) %&gt;% summarize(totalAmount = sum(Money)) %&gt;% mutate(perc = totalAmount/sum(totalAmount)) %&gt;% dplyr::select(perc) %&gt;% t() %&gt;% as.data.frame(row.names = &quot;cat_threat_inv_spec&quot;) %&gt;% `colnames&lt;-` (u.taxa_list) taxa_overexp &lt;- money.data_bio %&gt;% filter(cat_threat_overexp &gt; 0) %&gt;% dplyr::select(cat_taxa_amphibian:cat_taxa_reptile) %&gt;% pivot_longer(cat_taxa_amphibian:cat_taxa_reptile, names_to = &quot;Category&quot;, values_to = &quot;Money&quot;) %&gt;% group_by(Category) %&gt;% summarize(totalAmount = sum(Money)) %&gt;% mutate(perc = totalAmount/sum(totalAmount)) %&gt;% dplyr::select(perc) %&gt;% t() %&gt;% as.data.frame(row.names = &quot;cat_threat_overexp&quot;) %&gt;% `colnames&lt;-` (u.taxa_list) taxa_pollution &lt;- money.data_bio %&gt;% filter(cat_threat_pollution &gt; 0) %&gt;% dplyr::select(cat_taxa_amphibian:cat_taxa_reptile) %&gt;% pivot_longer(cat_taxa_amphibian:cat_taxa_reptile, names_to = &quot;Category&quot;, values_to = &quot;Money&quot;) %&gt;% group_by(Category) %&gt;% summarize(totalAmount = sum(Money)) %&gt;% mutate(perc = totalAmount/sum(totalAmount)) %&gt;% dplyr::select(perc) %&gt;% t() %&gt;% as.data.frame(row.names = &quot;cat_threat_pollution&quot;) %&gt;% `colnames&lt;-` (u.taxa_list) fig.3.money_data &lt;- bind_rows(taxa_climate, taxa_energy, taxa_habitat, taxa_inv, taxa_overexp, taxa_pollution) %&gt;% transmute_all(~.*100) %&gt;% mutate(Threat = u.threat_list) %&gt;% dplyr::select(8, 1:7) %&gt;% pivot_longer(Amphibians:Reptiles, names_to = &quot;Taxa&quot;, values_to = &quot;Percent&quot;) %&gt;% mutate(Source = &quot;Money&quot;, direction = 1, alpha = 1) ### 1 plot fig.3.data &lt;- bind_rows(fig.3.money_data, fig.3.maxwell_data) %&gt;% mutate(Percent = Percent * direction, Taxa = factor(Taxa, levels = c(&quot;Reptiles&quot;, &quot;Amphibians&quot;, &quot;Invertebrates&quot;, &quot;Birds&quot;, &quot;Mammals&quot;, &quot;Fish&quot;, &quot;Plants&quot;), ordered = TRUE), Threat = factor(Threat, levels = c(&quot;Climate Change&quot;, &quot;Overexploitation&quot;, &quot;Habitat Loss&quot;, &quot;Energy &amp; Transportation&quot;, &quot;Pollution&quot;, &quot;Invasive Species&quot;), ordered = TRUE) ) fig.3 &lt;- ggplot(fig.3.data %&gt;% filter(Taxa != &quot;Reptiles&quot;), aes(x = Taxa, y = Percent, fill = Taxa)) + geom_col(show.legend = F , color = &quot;black&quot;) + geom_hline(yintercept = 0, size = 1.2) + scale_fill_manual(values = cat_colors22[c(9,20,19,15,7,11)], name = &quot;Taxa&quot;, labels = u.taxa_list) + facet_wrap(~Threat) + theme_bw() + theme(axis.ticks.y= element_blank(), # axis.text.y = element_text(size = 10, face = &quot;bold&quot;), axis.text.x = element_blank(), # axis.text.y = element_text(size = 12), # axis.title = element_text(size = 16, face = &quot;bold&quot;), axis.ticks.x=element_line(color=NA), strip.background = element_rect(fill = &quot;black&quot;), strip.text = element_text(size = 12, color = &quot;white&quot;, face = &quot;bold&quot;)) + ylim(-90,90) + ggtitle(&quot;Percent of Taxa Threatened (IUCN) by vs. Funded for Unique Threats&quot;) + ylab(&quot;% Taxa Threatened | % Funding to Taxa&quot;) + coord_flip() # ggsave(fig.3, filename = &quot;~/Columbia E3B/Conservation Group/Output V15.2/Figures/taxa_threat_comparison.png&quot;, width=12, height=7,dpi = 300) fig.3 "],
["network-analysis.html", "Section 10 Network Analysis 10.1 Pie Charts", " Section 10 Network Analysis Figure 4: Threats Network Analysis The code presented here for Figure 4 generates the pie charts for each threat category that can be seen in the full network analysis figure. The actual network analysis was conducted separately, in WHERE WAS THIS CONDUCTED?. Threat Category Overlap 10.1 Pie Charts blank_theme &lt;- theme_minimal() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), panel.border = element_blank(), panel.grid = element_blank(), axis.ticks = element_blank(), plot.title=element_text(size=14, face=&quot;bold&quot;)) "]
]
